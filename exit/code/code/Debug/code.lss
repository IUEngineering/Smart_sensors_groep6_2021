
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00802000  00000952  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00802022  00802022  00000a08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000692b  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003991  00000000  00000000  0000760b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017be  00000000  00000000  0000af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  0000c75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003727  00000000  00000000  0000ce88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000221c  00000000  00000000  000105af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  000127cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_43>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_64>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_66>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_104>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 e5       	ldi	r30, 0x52	; 82
 214:	f9 e0       	ldi	r31, 0x09	; 9
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a2 32       	cpi	r26, 0x22	; 34
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a2 e2       	ldi	r26, 0x22	; 34
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ae 32       	cpi	r26, 0x2E	; 46
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
 23a:	0c 94 a7 04 	jmp	0x94e	; 0x94e <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <what_key_PD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <what_key_PD+0x4>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <what_key_PD+0xa>
 24c:	00 00       	nop
	init_timer_F0();
}

uint8_t what_key_PD(void){
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
 24e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
	
	switch(in_PD){
 252:	8f 3e       	cpi	r24, 0xEF	; 239
 254:	c9 f0       	breq	.+50     	; 0x288 <what_key_PD+0x46>
 256:	38 f4       	brcc	.+14     	; 0x266 <what_key_PD+0x24>
 258:	8f 3b       	cpi	r24, 0xBF	; 191
 25a:	d1 f0       	breq	.+52     	; 0x290 <what_key_PD+0x4e>
 25c:	8f 3d       	cpi	r24, 0xDF	; 223
 25e:	b1 f0       	breq	.+44     	; 0x28c <what_key_PD+0x4a>
 260:	8f 37       	cpi	r24, 0x7F	; 127
 262:	d1 f4       	brne	.+52     	; 0x298 <what_key_PD+0x56>
 264:	17 c0       	rjmp	.+46     	; 0x294 <what_key_PD+0x52>
 266:	8b 3f       	cpi	r24, 0xFB	; 251
 268:	59 f0       	breq	.+22     	; 0x280 <what_key_PD+0x3e>
 26a:	18 f4       	brcc	.+6      	; 0x272 <what_key_PD+0x30>
 26c:	87 3f       	cpi	r24, 0xF7	; 247
 26e:	51 f0       	breq	.+20     	; 0x284 <what_key_PD+0x42>
 270:	13 c0       	rjmp	.+38     	; 0x298 <what_key_PD+0x56>
 272:	8d 3f       	cpi	r24, 0xFD	; 253
 274:	19 f0       	breq	.+6      	; 0x27c <what_key_PD+0x3a>
 276:	8e 3f       	cpi	r24, 0xFE	; 254
 278:	89 f0       	breq	.+34     	; 0x29c <what_key_PD+0x5a>
 27a:	0e c0       	rjmp	.+28     	; 0x298 <what_key_PD+0x56>
		case 0xFE:
			return 1;
			break;
			
		case 0xFD:
			return 2;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	08 95       	ret
			break;
		
		case 0xFB:
			return 3;
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	08 95       	ret
			break;
		
		case 0xF7:
			return 4;
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	08 95       	ret
			break;
		
		case 0xEF:
			return 5;
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	08 95       	ret
			break;
		
		case 0xDF:
			return 6;
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	08 95       	ret
			break;
		
		case 0xBF:
			return 7;
 290:	87 e0       	ldi	r24, 0x07	; 7
 292:	08 95       	ret
			break;
		
		case 0x7F:
			return 8;
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	08 95       	ret
			break;
			
		default:
			return 20;
 298:	84 e1       	ldi	r24, 0x14	; 20
 29a:	08 95       	ret
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
	
	switch(in_PD){
		case 0xFE:
			return 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
			
		default:
			return 20;
			break;
	}
}
 29e:	08 95       	ret

000002a0 <what_key_PE>:
 2a0:	8f e9       	ldi	r24, 0x9F	; 159
 2a2:	9f e0       	ldi	r25, 0x0F	; 15
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <what_key_PE+0x4>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <what_key_PE+0xa>
 2aa:	00 00       	nop

uint8_t what_key_PE(void){
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
 2ac:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	
	switch(in_PE){
 2b0:	8b 3f       	cpi	r24, 0xFB	; 251
 2b2:	59 f0       	breq	.+22     	; 0x2ca <what_key_PE+0x2a>
 2b4:	18 f4       	brcc	.+6      	; 0x2bc <what_key_PE+0x1c>
 2b6:	87 3f       	cpi	r24, 0xF7	; 247
 2b8:	51 f0       	breq	.+20     	; 0x2ce <what_key_PE+0x2e>
 2ba:	0b c0       	rjmp	.+22     	; 0x2d2 <what_key_PE+0x32>
 2bc:	8d 3f       	cpi	r24, 0xFD	; 253
 2be:	19 f0       	breq	.+6      	; 0x2c6 <what_key_PE+0x26>
 2c0:	8e 3f       	cpi	r24, 0xFE	; 254
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <what_key_PE+0x36>
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <what_key_PE+0x32>
		case 0xFE: //PE0
		return 9;
		break;
		
		case 0xFD: //PE1
		return 0;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
		break;
		
		case 0xFB: //PE2
		return ok;
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	08 95       	ret
		break;
		
		case 0xF7: //PE3
		return reset;
 2ce:	8b e0       	ldi	r24, 0x0B	; 11
 2d0:	08 95       	ret
		break;
		
		default:
		return fault;
 2d2:	8d e0       	ldi	r24, 0x0D	; 13
 2d4:	08 95       	ret
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
	
	switch(in_PE){
		case 0xFE: //PE0
		return 9;
 2d6:	89 e0       	ldi	r24, 0x09	; 9
		
		default:
		return fault;
		break;
	}
}
 2d8:	08 95       	ret

000002da <password_check>:
uint8_t password_check(uint8_t key){
	static uint8_t password_compare[password_length];// = {1,1,1,1,1};
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
 2da:	8a 30       	cpi	r24, 0x0A	; 10
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <password_check+0x6>
 2de:	66 c0       	rjmp	.+204    	; 0x3ac <password_check+0xd2>
 2e0:	85 e0       	ldi	r24, 0x05	; 5
		for (uint8_t i = 0; i < 5; i++)
		{
			green_on;
 2e2:	e0 e0       	ldi	r30, 0x00	; 0
 2e4:	fb e0       	ldi	r31, 0x0B	; 11
 2e6:	2a ef       	ldi	r18, 0xFA	; 250
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	20 af       	std	Z+56, r18	; 0x38
 2ec:	31 af       	std	Z+57, r19	; 0x39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	4f ef       	ldi	r20, 0xFF	; 255
 2f0:	53 ef       	ldi	r21, 0xF3	; 243
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	41 50       	subi	r20, 0x01	; 1
 2f6:	50 40       	sbci	r21, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <password_check+0x1a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <password_check+0x24>
 2fe:	00 00       	nop
			_delay_ms(20);
			green_off;
 300:	10 ae       	std	Z+56, r1	; 0x38
 302:	11 ae       	std	Z+57, r1	; 0x39
 304:	4f ef       	ldi	r20, 0xFF	; 255
 306:	53 ef       	ldi	r21, 0xF3	; 243
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	41 50       	subi	r20, 0x01	; 1
 30c:	50 40       	sbci	r21, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <password_check+0x30>
 312:	00 c0       	rjmp	.+0      	; 0x314 <password_check+0x3a>
 314:	00 00       	nop
 316:	81 50       	subi	r24, 0x01	; 1
	static uint8_t password_compare[password_length];// = {1,1,1,1,1};
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
		for (uint8_t i = 0; i < 5; i++)
 318:	41 f7       	brne	.-48     	; 0x2ea <password_check+0x10>
 31a:	9d c0       	rjmp	.+314    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
		_delay_ms(500);
		//if (!(n == (password_length))) return 0;
		if (n >= password_length)
		{
			n = 0;
 31c:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
 320:	85 e0       	ldi	r24, 0x05	; 5
			for (uint8_t i = 0; i < 5; i++)
			{
				red_on;
 322:	e0 e0       	ldi	r30, 0x00	; 0
 324:	fb e0       	ldi	r31, 0x0B	; 11
 326:	2a ef       	ldi	r18, 0xFA	; 250
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	22 af       	std	Z+58, r18	; 0x3a
 32c:	33 af       	std	Z+59, r19	; 0x3b
 32e:	4f ef       	ldi	r20, 0xFF	; 255
 330:	57 e8       	ldi	r21, 0x87	; 135
 332:	93 e1       	ldi	r25, 0x13	; 19
 334:	41 50       	subi	r20, 0x01	; 1
 336:	50 40       	sbci	r21, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <password_check+0x5a>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <password_check+0x64>
 33e:	00 00       	nop
				_delay_ms(200);
				red_off;
 340:	12 ae       	std	Z+58, r1	; 0x3a
 342:	13 ae       	std	Z+59, r1	; 0x3b
 344:	4f ef       	ldi	r20, 0xFF	; 255
 346:	57 e8       	ldi	r21, 0x87	; 135
 348:	93 e1       	ldi	r25, 0x13	; 19
 34a:	41 50       	subi	r20, 0x01	; 1
 34c:	50 40       	sbci	r21, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <password_check+0x70>
 352:	00 c0       	rjmp	.+0      	; 0x354 <password_check+0x7a>
 354:	00 00       	nop
 356:	81 50       	subi	r24, 0x01	; 1
		_delay_ms(500);
		//if (!(n == (password_length))) return 0;
		if (n >= password_length)
		{
			n = 0;
			for (uint8_t i = 0; i < 5; i++)
 358:	41 f7       	brne	.-48     	; 0x32a <password_check+0x50>
 35a:	08 95       	ret
			return 0;
		}
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
 35c:	21 91       	ld	r18, Z+
 35e:	9d 91       	ld	r25, X+
 360:	29 13       	cpse	r18, r25
 362:	88 c0       	rjmp	.+272    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			}
				
			return 0;
		}
		
		for (uint8_t i = 0; i < password_length; i++)
 364:	e4 17       	cp	r30, r20
 366:	f5 07       	cpc	r31, r21
 368:	c9 f7       	brne	.-14     	; 0x35c <password_check+0x82>
 36a:	85 e0       	ldi	r24, 0x05	; 5
				return 0;
			}
		}
		for (uint8_t i = 0; i < 5; i++)
		{
			green_on;
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	fb e0       	ldi	r31, 0x0B	; 11
 370:	2a ef       	ldi	r18, 0xFA	; 250
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	20 af       	std	Z+56, r18	; 0x38
 376:	31 af       	std	Z+57, r19	; 0x39
 378:	4f ef       	ldi	r20, 0xFF	; 255
 37a:	57 e8       	ldi	r21, 0x87	; 135
 37c:	93 e1       	ldi	r25, 0x13	; 19
 37e:	41 50       	subi	r20, 0x01	; 1
 380:	50 40       	sbci	r21, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <password_check+0xa4>
 386:	00 c0       	rjmp	.+0      	; 0x388 <password_check+0xae>
 388:	00 00       	nop
			_delay_ms(200);
			green_off;
 38a:	10 ae       	std	Z+56, r1	; 0x38
 38c:	11 ae       	std	Z+57, r1	; 0x39
 38e:	4f ef       	ldi	r20, 0xFF	; 255
 390:	57 e8       	ldi	r21, 0x87	; 135
 392:	93 e1       	ldi	r25, 0x13	; 19
 394:	41 50       	subi	r20, 0x01	; 1
 396:	50 40       	sbci	r21, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <password_check+0xba>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <password_check+0xc4>
 39e:	00 00       	nop
 3a0:	81 50       	subi	r24, 0x01	; 1
			if (!(password[i] == password_compare[i])) 
			{
				return 0;
			}
		}
		for (uint8_t i = 0; i < 5; i++)
 3a2:	41 f7       	brne	.-48     	; 0x374 <password_check+0x9a>
			green_on;
			_delay_ms(200);
			green_off;
			_delay_ms(200);
		}
		n = 0;
 3a4:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
		return 1;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	08 95       	ret
	}
	
	// reset the password if the reset key is pressed
	if (key == reset)
 3ac:	8b 30       	cpi	r24, 0x0B	; 11
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <password_check+0xde>
	{
		n = 0;
 3b0:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
		return 0;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
	}
	
	if (n == password_length)
 3b8:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <n.3984>
 3bc:	95 30       	cpi	r25, 0x05	; 5
 3be:	11 f4       	brne	.+4      	; 0x3c4 <password_check+0xea>
	{
		n = 0;
 3c0:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
		//}
		//return 0;
	}
	
	// add number in password checker
	password_compare[n] = key;
 3c4:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <n.3984>
 3c8:	e9 2f       	mov	r30, r25
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ee 5d       	subi	r30, 0xDE	; 222
 3ce:	ff 4d       	sbci	r31, 0xDF	; 223
 3d0:	80 83       	st	Z, r24
	n++;
 3d2:	9f 5f       	subi	r25, 0xFF	; 255
 3d4:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <n.3984>
	for (uint8_t i = 0; i < 2; i++)
	{
		green_on;
 3d8:	e0 e0       	ldi	r30, 0x00	; 0
 3da:	fb e0       	ldi	r31, 0x0B	; 11
 3dc:	8a ef       	ldi	r24, 0xFA	; 250
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	80 af       	std	Z+56, r24	; 0x38
 3e2:	91 af       	std	Z+57, r25	; 0x39
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	37 e8       	ldi	r19, 0x87	; 135
 3e8:	43 e1       	ldi	r20, 0x13	; 19
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	30 40       	sbci	r19, 0x00	; 0
 3ee:	40 40       	sbci	r20, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <password_check+0x110>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <password_check+0x11a>
 3f4:	00 00       	nop
		_delay_ms(200);
		green_off;
 3f6:	10 ae       	std	Z+56, r1	; 0x38
 3f8:	11 ae       	std	Z+57, r1	; 0x39
 3fa:	5f ef       	ldi	r21, 0xFF	; 255
 3fc:	27 e8       	ldi	r18, 0x87	; 135
 3fe:	33 e1       	ldi	r19, 0x13	; 19
 400:	51 50       	subi	r21, 0x01	; 1
 402:	20 40       	sbci	r18, 0x00	; 0
 404:	30 40       	sbci	r19, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	// add number in password checker
	password_compare[n] = key;
	n++;
	for (uint8_t i = 0; i < 2; i++)
	{
		green_on;
 40c:	80 af       	std	Z+56, r24	; 0x38
 40e:	91 af       	std	Z+57, r25	; 0x39
 410:	4f ef       	ldi	r20, 0xFF	; 255
 412:	57 e8       	ldi	r21, 0x87	; 135
 414:	83 e1       	ldi	r24, 0x13	; 19
 416:	41 50       	subi	r20, 0x01	; 1
 418:	50 40       	sbci	r21, 0x00	; 0
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
		_delay_ms(200);
		green_off;
 422:	10 ae       	std	Z+56, r1	; 0x38
 424:	11 ae       	std	Z+57, r1	; 0x39
 426:	9f ef       	ldi	r25, 0xFF	; 255
 428:	27 e8       	ldi	r18, 0x87	; 135
 42a:	33 e1       	ldi	r19, 0x13	; 19
 42c:	91 50       	subi	r25, 0x01	; 1
 42e:	20 40       	sbci	r18, 0x00	; 0
 430:	30 40       	sbci	r19, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
		_delay_ms(200);
	}
	return 2;
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	08 95       	ret
			return 0;
		}
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
 43c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 440:	90 91 22 20 	lds	r25, 0x2022	; 0x802022 <__data_end>
 444:	29 13       	cpse	r18, r25
 446:	16 c0       	rjmp	.+44     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 448:	e1 e0       	ldi	r30, 0x01	; 1
 44a:	f0 e2       	ldi	r31, 0x20	; 32
 44c:	a3 e2       	ldi	r26, 0x23	; 35
 44e:	b0 e2       	ldi	r27, 0x20	; 32
 450:	45 e0       	ldi	r20, 0x05	; 5
 452:	50 e2       	ldi	r21, 0x20	; 32
 454:	83 cf       	rjmp	.-250    	; 0x35c <password_check+0x82>
 456:	4f ef       	ldi	r20, 0xFF	; 255
 458:	53 ed       	ldi	r21, 0xD3	; 211
 45a:	90 e3       	ldi	r25, 0x30	; 48
 45c:	41 50       	subi	r20, 0x01	; 1
 45e:	50 40       	sbci	r21, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 466:	00 00       	nop
			green_off;
			_delay_ms(20);
		}
		_delay_ms(500);
		//if (!(n == (password_length))) return 0;
		if (n >= password_length)
 468:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <n.3984>
 46c:	95 30       	cpi	r25, 0x05	; 5
 46e:	08 f0       	brcs	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	55 cf       	rjmp	.-342    	; 0x31c <password_check+0x42>
 472:	e4 cf       	rjmp	.-56     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		_delay_ms(200);
		green_off;
		_delay_ms(200);
	}
	return 2;
}
 474:	08 95       	ret

00000476 <open_door>:

void open_door(uint8_t val){
 476:	08 95       	ret

00000478 <init_nrf>:
	}
}

void init_nrf(void)
{
	nrfspiInit();                                        // Initialize SPI
 478:	0e 94 76 04 	call	0x8ec	; 0x8ec <nrfspiInit>
	nrfBegin();                                          // Initialize radio module
 47c:	0e 94 4d 04 	call	0x89a	; 0x89a <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc,               // Auto Retransmission Delay: 1000 us
 480:	68 e0       	ldi	r22, 0x08	; 8
 482:	80 e3       	ldi	r24, 0x30	; 48
 484:	0e 94 43 04 	call	0x886	; 0x886 <nrfSetRetries>
	NRF_SETUP_ARC_8RETRANSMIT_gc);						 // Auto Retransmission Count: 8 retries
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);             // Power Control: -6 dBm
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	0e 94 11 04 	call	0x822	; 0x822 <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);          // Data Rate: 250 Kbps
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	0e 94 1f 04 	call	0x83e	; 0x83e <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);               // CRC Check
 494:	8c e0       	ldi	r24, 0x0C	; 12
 496:	0e 94 35 04 	call	0x86a	; 0x86a <nrfSetCRCLength>
	nrfSetChannel(54);                                   // Channel: 54
 49a:	86 e3       	ldi	r24, 0x36	; 54
 49c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <nrfSetChannel>
	nrfSetAutoAck(1);                                    // Auto Acknowledge on
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	0e 94 05 04 	call	0x80a	; 0x80a <nrfSetAutoAck>
	nrfEnableDynamicPayloads();                          // Enable Dynamic Payloads
 4a6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();                             // Clear interrupt bits
 4aa:	0e 94 48 04 	call	0x890	; 0x890 <nrfClearInterruptBits>
	nrfFlushRx();                                        // Flush fifo's
 4ae:	0e 94 42 03 	call	0x684	; 0x684 <nrfFlushRx>
	nrfFlushTx();
 4b2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <nrfFlushTx>

	nrfOpenWritingPipe(pipe);                            // Pipe for sending
 4b6:	87 e0       	ldi	r24, 0x07	; 7
 4b8:	90 e2       	ldi	r25, 0x20	; 32
 4ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <nrfOpenWritingPipe>
	nrfOpenReadingPipe(0, pipe);                         // Necessary for acknowledge
 4be:	67 e0       	ldi	r22, 0x07	; 7
 4c0:	70 e2       	ldi	r23, 0x20	; 32
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <nrfOpenReadingPipe>
 4c8:	08 95       	ret

000004ca <main>:
{
	// init nrf
	// init keypad
	// init hall effect sensor
	// init sleep mode
    init_nrf();
 4ca:	0e 94 3c 02 	call	0x478	; 0x478 <init_nrf>
 4ce:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <state>
 4d2:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <state+0x1>
			case 1:
				//send over NRF
				//enter idle mode
				break;
			default:
				state = 1;
 4d6:	31 e0       	ldi	r19, 0x01	; 1
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <main+0x16>
 4dc:	83 2f       	mov	r24, r19
 4de:	92 2f       	mov	r25, r18
	// enable global interrupts
	// enter idle mode
	
    while (1) 
    {
		switch (state)
 4e0:	82 30       	cpi	r24, 0x02	; 2
 4e2:	91 05       	cpc	r25, r1
 4e4:	e8 f3       	brcs	.-6      	; 0x4e0 <main+0x16>
 4e6:	fa cf       	rjmp	.-12     	; 0x4dc <main+0x12>

000004e8 <__vector_104>:
*	<TR><TD> LPO </TD><TD> LP_OUT	</TD><TD> PA1           </TD></TR>	
*	</TABLE>
*/

// ISR for the NRF
ISR(PORTF_INT0_vect){
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
	// nrf what happened
	// react to message
	// go back to idle mode
}
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <__vector_64>:

// ISR for the keypad on port D
ISR(PORTD_INT0_vect){
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	0b b6       	in	r0, 0x3b	; 59
 508:	0f 92       	push	r0
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	cli();
 522:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key	= what_key_PD();
 524:	0e 94 21 01 	call	0x242	; 0x242 <what_key_PD>
	// add key press to password check
	door = password_check(key);
 528:	0e 94 6d 01 	call	0x2da	; 0x2da <password_check>
	// if password check is filled compare with password
	// correct open door and show green led
	// incorrect show red led. (maybe in a later revision buz a buzzer)
	open_door(door);
 52c:	0e 94 3b 02 	call	0x476	; 0x476 <open_door>
	// go back to idle mode
	sei();
 530:	78 94       	sei
}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0b be       	out	0x3b, r0	; 59
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_43>:

// ISR for the keypad on port E
ISR(PORTE_INT0_vect){
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	0b b6       	in	r0, 0x3b	; 59
 564:	0f 92       	push	r0
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	cli();
 57e:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key = what_key_PE();
 580:	0e 94 50 01 	call	0x2a0	; 0x2a0 <what_key_PE>
	// add key press to password check
	door = password_check(key);
 584:	0e 94 6d 01 	call	0x2da	; 0x2da <password_check>
	// if password check is filled compare with password
	// correct open door and show green led
	// incorrect show red led. (maybe in a later revision buz a buzzer)
	// go back to idle
	open_door(door);
 588:	0e 94 3b 02 	call	0x476	; 0x476 <open_door>
	// go back to idle mode
	sei();
 58c:	78 94       	sei
}
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0b be       	out	0x3b, r0	; 59
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <__vector_66>:

// ISR for last person out button
ISR(PORTA_INT0_vect){
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
	// make state 0
	state = 0;
 5be:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <state>
 5c2:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <state+0x1>
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	c0 ea       	ldi	r28, 0xA0	; 160
 5d8:	d6 e0       	ldi	r29, 0x06	; 6
 5da:	10 e2       	ldi	r17, 0x20	; 32
 5dc:	1e 83       	std	Y+6, r17	; 0x06
 5de:	8f 71       	andi	r24, 0x1F	; 31
 5e0:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 5ea:	1d 83       	std	Y+5, r17	; 0x05
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	08 95       	ret

000005f4 <nrfWriteRegisterMulti>:
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	7b 01       	movw	r14, r22
 604:	c4 2f       	mov	r28, r20
 606:	90 e2       	ldi	r25, 0x20	; 32
 608:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 60c:	8f 71       	andi	r24, 0x1F	; 31
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 614:	d8 2e       	mov	r13, r24
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	8c 0f       	add	r24, r28
 61a:	cc 23       	and	r28, r28
 61c:	69 f0       	breq	.+26     	; 0x638 <nrfWriteRegisterMulti+0x44>
 61e:	e7 01       	movw	r28, r14
 620:	08 2f       	mov	r16, r24
 622:	10 e0       	ldi	r17, 0x00	; 0
 624:	0f 5f       	subi	r16, 0xFF	; 255
 626:	1f 4f       	sbci	r17, 0xFF	; 255
 628:	0e 0d       	add	r16, r14
 62a:	1f 1d       	adc	r17, r15
 62c:	89 91       	ld	r24, Y+
 62e:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 632:	c0 17       	cp	r28, r16
 634:	d1 07       	cpc	r29, r17
 636:	d1 f7       	brne	.-12     	; 0x62c <nrfWriteRegisterMulti+0x38>
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 63e:	8d 2d       	mov	r24, r13
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	ff 90       	pop	r15
 64a:	ef 90       	pop	r14
 64c:	df 90       	pop	r13
 64e:	08 95       	ret

00000650 <nrfWriteRegister>:
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	f6 2e       	mov	r15, r22
 65c:	c0 ea       	ldi	r28, 0xA0	; 160
 65e:	d6 e0       	ldi	r29, 0x06	; 6
 660:	10 e2       	ldi	r17, 0x20	; 32
 662:	1e 83       	std	Y+6, r17	; 0x06
 664:	8f 71       	andi	r24, 0x1F	; 31
 666:	80 62       	ori	r24, 0x20	; 32
 668:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 66c:	08 2f       	mov	r16, r24
 66e:	8f 2d       	mov	r24, r15
 670:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 674:	1d 83       	std	Y+5, r17	; 0x05
 676:	80 2f       	mov	r24, r16
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	ff 90       	pop	r15
 682:	08 95       	ret

00000684 <nrfFlushRx>:
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	c0 ea       	ldi	r28, 0xA0	; 160
 68c:	d6 e0       	ldi	r29, 0x06	; 6
 68e:	10 e2       	ldi	r17, 0x20	; 32
 690:	1e 83       	std	Y+6, r17	; 0x06
 692:	82 ee       	ldi	r24, 0xE2	; 226
 694:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 698:	1d 83       	std	Y+5, r17	; 0x05
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	08 95       	ret

000006a2 <nrfFlushTx>:
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	c0 ea       	ldi	r28, 0xA0	; 160
 6aa:	d6 e0       	ldi	r29, 0x06	; 6
 6ac:	10 e2       	ldi	r17, 0x20	; 32
 6ae:	1e 83       	std	Y+6, r17	; 0x06
 6b0:	81 ee       	ldi	r24, 0xE1	; 225
 6b2:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 6b6:	1d 83       	std	Y+5, r17	; 0x05
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	08 95       	ret

000006c0 <nrfOpenWritingPipe>:
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	ec 01       	movw	r28, r24
 6c6:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 6ca:	bc 01       	movw	r22, r24
 6cc:	8a e0       	ldi	r24, 0x0A	; 10
 6ce:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <nrfWriteRegisterMulti>
 6d2:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 6d6:	be 01       	movw	r22, r28
 6d8:	80 e1       	ldi	r24, 0x10	; 16
 6da:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <nrfWriteRegisterMulti>
 6de:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
 6e2:	60 32       	cpi	r22, 0x20	; 32
 6e4:	20 f4       	brcc	.+8      	; 0x6ee <nrfOpenWritingPipe+0x2e>
 6e6:	81 e1       	ldi	r24, 0x11	; 17
 6e8:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <nrfOpenWritingPipe+0x36>
 6ee:	60 e2       	ldi	r22, 0x20	; 32
 6f0:	81 e1       	ldi	r24, 0x11	; 17
 6f2:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	08 95       	ret

000006fc <nrfOpenReadingPipe>:
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	c8 2f       	mov	r28, r24
 706:	8b 01       	movw	r16, r22
 708:	81 11       	cpse	r24, r1
 70a:	08 c0       	rjmp	.+16     	; 0x71c <nrfOpenReadingPipe+0x20>
 70c:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	88 e2       	ldi	r24, 0x28	; 40
 714:	90 e2       	ldi	r25, 0x20	; 32
 716:	0e 94 9e 04 	call	0x93c	; 0x93c <memcpy>
 71a:	04 c0       	rjmp	.+8      	; 0x724 <nrfOpenReadingPipe+0x28>
 71c:	87 30       	cpi	r24, 0x07	; 7
 71e:	78 f5       	brcc	.+94     	; 0x77e <nrfOpenReadingPipe+0x82>
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	58 f4       	brcc	.+22     	; 0x73a <nrfOpenReadingPipe+0x3e>
 724:	ec 2f       	mov	r30, r28
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	e5 5e       	subi	r30, 0xE5	; 229
 72a:	ff 4d       	sbci	r31, 0xDF	; 223
 72c:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 730:	b8 01       	movw	r22, r16
 732:	80 81       	ld	r24, Z
 734:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <nrfWriteRegisterMulti>
 738:	08 c0       	rjmp	.+16     	; 0x74a <nrfOpenReadingPipe+0x4e>
 73a:	e8 2f       	mov	r30, r24
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	e5 5e       	subi	r30, 0xE5	; 229
 740:	ff 4d       	sbci	r31, 0xDF	; 223
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	80 81       	ld	r24, Z
 746:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <nrfWriteRegisterMulti>
 74a:	d0 e0       	ldi	r29, 0x00	; 0
 74c:	fe 01       	movw	r30, r28
 74e:	eb 5e       	subi	r30, 0xEB	; 235
 750:	ff 4d       	sbci	r31, 0xDF	; 223
 752:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
 756:	80 81       	ld	r24, Z
 758:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 762:	c1 5f       	subi	r28, 0xF1	; 241
 764:	df 4d       	sbci	r29, 0xDF	; 223
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	08 80       	ld	r0, Y
 76c:	02 c0       	rjmp	.+4      	; 0x772 <nrfOpenReadingPipe+0x76>
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	0a 94       	dec	r0
 774:	e2 f7       	brpl	.-8      	; 0x76e <nrfOpenReadingPipe+0x72>
 776:	68 2b       	or	r22, r24
 778:	82 e0       	ldi	r24, 0x02	; 2
 77a:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	1f 91       	pop	r17
 784:	0f 91       	pop	r16
 786:	08 95       	ret

00000788 <nrfToggleFeatures>:
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	c0 ea       	ldi	r28, 0xA0	; 160
 790:	d6 e0       	ldi	r29, 0x06	; 6
 792:	10 e2       	ldi	r17, 0x20	; 32
 794:	1e 83       	std	Y+6, r17	; 0x06
 796:	80 e5       	ldi	r24, 0x50	; 80
 798:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 79c:	83 e7       	ldi	r24, 0x73	; 115
 79e:	0e 94 90 04 	call	0x920	; 0x920 <nrfspiTransfer>
 7a2:	1d 83       	std	Y+5, r17	; 0x05
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	08 95       	ret

000007ac <nrfEnableDynamicPayloads>:
 7ac:	8d e1       	ldi	r24, 0x1D	; 29
 7ae:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 7b2:	68 2f       	mov	r22, r24
 7b4:	64 60       	ori	r22, 0x04	; 4
 7b6:	8d e1       	ldi	r24, 0x1D	; 29
 7b8:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 7bc:	8d e1       	ldi	r24, 0x1D	; 29
 7be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 7c2:	81 11       	cpse	r24, r1
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <nrfEnableDynamicPayloads+0x2e>
 7c6:	0e 94 c4 03 	call	0x788	; 0x788 <nrfToggleFeatures>
 7ca:	8d e1       	ldi	r24, 0x1D	; 29
 7cc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 7d0:	68 2f       	mov	r22, r24
 7d2:	64 60       	ori	r22, 0x04	; 4
 7d4:	8d e1       	ldi	r24, 0x1D	; 29
 7d6:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 7da:	8c e1       	ldi	r24, 0x1C	; 28
 7dc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 7e0:	68 2f       	mov	r22, r24
 7e2:	6f 63       	ori	r22, 0x3F	; 63
 7e4:	8c e1       	ldi	r24, 0x1C	; 28
 7e6:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <dynamic_payloads_enabled>
 7f0:	08 95       	ret

000007f2 <nrfSetChannel>:
 7f2:	88 23       	and	r24, r24
 7f4:	2c f0       	brlt	.+10     	; 0x800 <nrfSetChannel+0xe>
 7f6:	68 2f       	mov	r22, r24
 7f8:	85 e0       	ldi	r24, 0x05	; 5
 7fa:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 7fe:	08 95       	ret
 800:	6f e7       	ldi	r22, 0x7F	; 127
 802:	85 e0       	ldi	r24, 0x05	; 5
 804:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 808:	08 95       	ret

0000080a <nrfSetAutoAck>:
 80a:	88 23       	and	r24, r24
 80c:	29 f0       	breq	.+10     	; 0x818 <nrfSetAutoAck+0xe>
 80e:	6f e3       	ldi	r22, 0x3F	; 63
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 816:	08 95       	ret
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 820:	08 95       	ret

00000822 <nrfSetPALevel>:
 822:	cf 93       	push	r28
 824:	c8 2f       	mov	r28, r24
 826:	86 e0       	ldi	r24, 0x06	; 6
 828:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 82c:	89 7f       	andi	r24, 0xF9	; 249
 82e:	c6 70       	andi	r28, 0x06	; 6
 830:	68 2f       	mov	r22, r24
 832:	6c 2b       	or	r22, r28
 834:	86 e0       	ldi	r24, 0x06	; 6
 836:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <nrfSetDataRate>:
 83e:	cf 93       	push	r28
 840:	c8 2f       	mov	r28, r24
 842:	86 e0       	ldi	r24, 0x06	; 6
 844:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 848:	87 7d       	andi	r24, 0xD7	; 215
 84a:	9c 2f       	mov	r25, r28
 84c:	98 72       	andi	r25, 0x28	; 40
 84e:	68 2f       	mov	r22, r24
 850:	69 2b       	or	r22, r25
 852:	86 e0       	ldi	r24, 0x06	; 6
 854:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 858:	86 e0       	ldi	r24, 0x06	; 6
 85a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 85e:	91 e0       	ldi	r25, 0x01	; 1
 860:	c8 13       	cpse	r28, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	89 2f       	mov	r24, r25
 866:	cf 91       	pop	r28
 868:	08 95       	ret

0000086a <nrfSetCRCLength>:
 86a:	cf 93       	push	r28
 86c:	c8 2f       	mov	r28, r24
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <nrfReadRegister>
 874:	83 7f       	andi	r24, 0xF3	; 243
 876:	cc 70       	andi	r28, 0x0C	; 12
 878:	68 2f       	mov	r22, r24
 87a:	6c 2b       	or	r22, r28
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <nrfSetRetries>:
 886:	68 2b       	or	r22, r24
 888:	84 e0       	ldi	r24, 0x04	; 4
 88a:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 88e:	08 95       	ret

00000890 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
 890:	60 e7       	ldi	r22, 0x70	; 112
 892:	87 e0       	ldi	r24, 0x07	; 7
 894:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
 898:	08 95       	ret

0000089a <nrfBegin>:
 89a:	8f e3       	ldi	r24, 0x3F	; 63
 89c:	9c e9       	ldi	r25, 0x9C	; 156
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <nrfBegin+0x4>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <nrfBegin+0xa>
 8a4:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
 8a6:	6f e5       	ldi	r22, 0x5F	; 95
 8a8:	84 e0       	ldi	r24, 0x04	; 4
 8aa:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
 8ae:	86 e0       	ldi	r24, 0x06	; 6
 8b0:	0e 94 11 04 	call	0x822	; 0x822 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	0e 94 1f 04 	call	0x83e	; 0x83e <nrfSetDataRate>
 8ba:	88 23       	and	r24, r24
 8bc:	19 f0       	breq	.+6      	; 0x8c4 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	0e 94 1f 04 	call	0x83e	; 0x83e <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
 8ca:	8c e0       	ldi	r24, 0x0C	; 12
 8cc:	0e 94 35 04 	call	0x86a	; 0x86a <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	8c e1       	ldi	r24, 0x1C	; 28
 8d4:	0e 94 28 03 	call	0x650	; 0x650 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
 8d8:	8c e4       	ldi	r24, 0x4C	; 76
 8da:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
 8de:	0e 94 48 04 	call	0x890	; 0x890 <nrfClearInterruptBits>
  nrfFlushRx();
 8e2:	0e 94 42 03 	call	0x684	; 0x684 <nrfFlushRx>
  nrfFlushTx();
 8e6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <nrfFlushTx>
 8ea:	08 95       	ret

000008ec <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
 8ec:	e0 e4       	ldi	r30, 0x40	; 64
 8ee:	f6 e0       	ldi	r31, 0x06	; 6
 8f0:	88 e0       	ldi	r24, 0x08	; 8
 8f2:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
 8fc:	e0 ea       	ldi	r30, 0xA0	; 160
 8fe:	f6 e0       	ldi	r31, 0x06	; 6
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
 904:	80 e4       	ldi	r24, 0x40	; 64
 906:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
 908:	80 e8       	ldi	r24, 0x80	; 128
 90a:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 90c:	e0 ea       	ldi	r30, 0xA0	; 160
 90e:	f8 e0       	ldi	r31, 0x08	; 8
 910:	88 e1       	ldi	r24, 0x18	; 24
 912:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
 914:	80 ec       	ldi	r24, 0xC0	; 192
 916:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
 918:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	86 83       	std	Z+6, r24	; 0x06
 91e:	08 95       	ret

00000920 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
 920:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
 924:	e0 ea       	ldi	r30, 0xA0	; 160
 926:	f8 e0       	ldi	r31, 0x08	; 8
 928:	81 81       	ldd	r24, Z+1	; 0x01
 92a:	86 ff       	sbrs	r24, 6
 92c:	fd cf       	rjmp	.-6      	; 0x928 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
 92e:	e0 ea       	ldi	r30, 0xA0	; 160
 930:	f8 e0       	ldi	r31, 0x08	; 8
 932:	81 81       	ldd	r24, Z+1	; 0x01
 934:	80 64       	ori	r24, 0x40	; 64
 936:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
 938:	80 81       	ld	r24, Z
}
 93a:	08 95       	ret

0000093c <memcpy>:
 93c:	fb 01       	movw	r30, r22
 93e:	dc 01       	movw	r26, r24
 940:	02 c0       	rjmp	.+4      	; 0x946 <memcpy+0xa>
 942:	01 90       	ld	r0, Z+
 944:	0d 92       	st	X+, r0
 946:	41 50       	subi	r20, 0x01	; 1
 948:	50 40       	sbci	r21, 0x00	; 0
 94a:	d8 f7       	brcc	.-10     	; 0x942 <memcpy+0x6>
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
