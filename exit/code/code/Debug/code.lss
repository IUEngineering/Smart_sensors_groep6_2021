
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00802000  00000ad2  00000b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00802022  00802022  00000b88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007692  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ae6  00000000  00000000  0000854a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b3e  00000000  00000000  0000c030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  0000db70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b9c  00000000  00000000  0000e34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002272  00000000  00000000  00011ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0001415a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_43>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_64>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_66>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_77>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 15 03 	jmp	0x62a	; 0x62a <__vector_104>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 ed       	ldi	r30, 0xD2	; 210
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a2 32       	cpi	r26, 0x22	; 34
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a2 e2       	ldi	r26, 0x22	; 34
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ae 32       	cpi	r26, 0x2E	; 46
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 f7 02 	call	0x5ee	; 0x5ee <main>
 23a:	0c 94 67 05 	jmp	0xace	; 0xace <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |                   // Select frequency range
 242:	e0 e5       	ldi	r30, 0x50	; 80
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	8b ec       	ldi	r24, 0xCB	; 203
 248:	82 83       	std	Z+2, r24	; 0x02
                 OSC_XOSCSEL_XTAL_16KCLK_gc;                // Select start-up time
  OSC.CTRL |= OSC_XOSCEN_bm;                                // Enable oscillator
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );                // Wait for oscillator is ready
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	83 ff       	sbrs	r24, 3
 254:	fd cf       	rjmp	.-6      	; 0x250 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (OSC_PLLFAC_gm & 2);   // Select PLL source and multipl. factor
 256:	e0 e5       	ldi	r30, 0x50	; 80
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	82 ec       	ldi	r24, 0xC2	; 194
 25c:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL |= OSC_PLLEN_bm;                                 // Enable PLL
 25e:	80 81       	ld	r24, Z
 260:	80 61       	ori	r24, 0x10	; 16
 262:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );                 // Wait for PLL is ready
 264:	81 81       	ldd	r24, Z+1	; 0x01
 266:	84 ff       	sbrs	r24, 4
 268:	fd cf       	rjmp	.-6      	; 0x264 <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
 26a:	88 ed       	ldi	r24, 0xD8	; 216
 26c:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
 274:	e0 e5       	ldi	r30, 0x50	; 80
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <init_keypad>:
*/

// this is the password for the keypad!
uint8_t password[password_length] = {1, 1, 1, 1, 1};

void init_keypad(void){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	
	//set pin PA1 as input
	PORTA.DIRCLR = PIN1_bm;
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d6 e0       	ldi	r29, 0x06	; 6
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	9a 83       	std	Y+2, r25	; 0x02
	
	//set pin PB0 as output
	PORTB.DIRSET = PIN0_bm;
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	40 93 21 06 	sts	0x0621, r20	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	
	//set port D as input
	PORTD.DIRCLR = 0xFF;
 298:	a0 e6       	ldi	r26, 0x60	; 96
 29a:	b6 e0       	ldi	r27, 0x06	; 6
 29c:	3f ef       	ldi	r19, 0xFF	; 255
 29e:	12 96       	adiw	r26, 0x02	; 2
 2a0:	3c 93       	st	X, r19
 2a2:	12 97       	sbiw	r26, 0x02	; 2
	
	//set E0, E1, E2, E3 as inputs
	PORTE.DIRCLR = 0x0F;
 2a4:	e0 e8       	ldi	r30, 0x80	; 128
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	2f e0       	ldi	r18, 0x0F	; 15
 2aa:	22 83       	std	Z+2, r18	; 0x02
	
	//for port A
	//configure input sense on falling edge
	PORTA.PIN1CTRL = PORT_ISC_BOTHEDGES_gc;
 2ac:	19 8a       	std	Y+17, r1	; 0x11
	
	//for port D 
	//use internal pull ups
	//configure input sense on falling edge
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ae:	8a e1       	ldi	r24, 0x1A	; 26
 2b0:	50 96       	adiw	r26, 0x10	; 16
 2b2:	8c 93       	st	X, r24
 2b4:	50 97       	sbiw	r26, 0x10	; 16
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2b6:	51 96       	adiw	r26, 0x11	; 17
 2b8:	8c 93       	st	X, r24
 2ba:	51 97       	sbiw	r26, 0x11	; 17
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2bc:	52 96       	adiw	r26, 0x12	; 18
 2be:	8c 93       	st	X, r24
 2c0:	52 97       	sbiw	r26, 0x12	; 18
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c2:	53 96       	adiw	r26, 0x13	; 19
 2c4:	8c 93       	st	X, r24
 2c6:	53 97       	sbiw	r26, 0x13	; 19
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c8:	54 96       	adiw	r26, 0x14	; 20
 2ca:	8c 93       	st	X, r24
 2cc:	54 97       	sbiw	r26, 0x14	; 20
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ce:	55 96       	adiw	r26, 0x15	; 21
 2d0:	8c 93       	st	X, r24
 2d2:	55 97       	sbiw	r26, 0x15	; 21
	PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2d4:	56 96       	adiw	r26, 0x16	; 22
 2d6:	8c 93       	st	X, r24
 2d8:	56 97       	sbiw	r26, 0x16	; 22
	PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2da:	57 96       	adiw	r26, 0x17	; 23
 2dc:	8c 93       	st	X, r24
 2de:	57 97       	sbiw	r26, 0x17	; 23
	
	//for port E
	//use internal pull ups
	//configure input sense on falling edge
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e0:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e2:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e4:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e6:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e8:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ea:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ec:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ee:	87 8b       	std	Z+23, r24	; 0x17
	
	//configure PA1 interrupt 0
	PORTA.INT0MASK = PIN1_bm;
 2f0:	9a 87       	std	Y+10, r25	; 0x0a
	PORTA.INTCTRL = PORT_INT0LVL_LO_gc;
 2f2:	49 87       	std	Y+9, r20	; 0x09
	
	//configure port D interrupt 0
	PORTD.INT0MASK = 0xFF;
 2f4:	1a 96       	adiw	r26, 0x0a	; 10
 2f6:	3c 93       	st	X, r19
 2f8:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.INTCTRL = PORT_INT0LVL_MED_gc;
 2fa:	19 96       	adiw	r26, 0x09	; 9
 2fc:	9c 93       	st	X, r25
	
	//configure port E interrupt 0
	PORTE.INT0MASK = 0x0F;
 2fe:	22 87       	std	Z+10, r18	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_MED_gc;
 300:	91 87       	std	Z+9, r25	; 0x09
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <init_timer_F0>:

void init_timer_F0(void){
	PORTF.DIRSET = PIN0_bm|PIN1_bm;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	TCF0.PER = 9999;
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	fb e0       	ldi	r31, 0x0B	; 11
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	97 e2       	ldi	r25, 0x27	; 39
 316:	86 a3       	std	Z+38, r24	; 0x26
 318:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.CTRLA = TC_CLKSEL_DIV8_gc;
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	80 83       	st	Z, r24
	TCF0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	81 83       	std	Z+1, r24	; 0x01
	TCF0.CCA = 0;
 322:	10 a6       	std	Z+40, r1	; 0x28
 324:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
 326:	12 a6       	std	Z+42, r1	; 0x2a
 328:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 10;
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	84 a7       	std	Z+44, r24	; 0x2c
 330:	95 a7       	std	Z+45, r25	; 0x2d
 332:	08 95       	ret

00000334 <init_timer_D0>:
}

void init_timer_D0(void){
	TCD0.CTRLA = TC_CLKSEL_OFF_gc;
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f9 e0       	ldi	r31, 0x09	; 9
 338:	10 82       	st	Z, r1
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	86 83       	std	Z+6, r24	; 0x06
	TCD0.CTRLB = TC_WGMODE_SS_gc;
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	81 83       	std	Z+1, r24	; 0x01
	TCD0.PER = 65535;  // 2^16 - 1
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	86 a3       	std	Z+38, r24	; 0x26
 348:	97 a3       	std	Z+39, r25	; 0x27
 34a:	08 95       	ret

0000034c <init_LED>:
}

void init_LED(void){
	init_timer_D0();
 34c:	0e 94 9a 01 	call	0x334	; 0x334 <init_timer_D0>
	init_timer_F0();
 350:	0e 94 84 01 	call	0x308	; 0x308 <init_timer_F0>
 354:	08 95       	ret

00000356 <what_key_PD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e9       	ldi	r24, 0x9F	; 159
 358:	9f e0       	ldi	r25, 0x0F	; 15
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <what_key_PD+0x4>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <what_key_PD+0xa>
 360:	00 00       	nop
}

uint8_t what_key_PD(void){
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
 362:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
	
	switch(in_PD){
 366:	8f 3e       	cpi	r24, 0xEF	; 239
 368:	c9 f0       	breq	.+50     	; 0x39c <what_key_PD+0x46>
 36a:	38 f4       	brcc	.+14     	; 0x37a <what_key_PD+0x24>
 36c:	8f 3b       	cpi	r24, 0xBF	; 191
 36e:	d1 f0       	breq	.+52     	; 0x3a4 <what_key_PD+0x4e>
 370:	8f 3d       	cpi	r24, 0xDF	; 223
 372:	b1 f0       	breq	.+44     	; 0x3a0 <what_key_PD+0x4a>
 374:	8f 37       	cpi	r24, 0x7F	; 127
 376:	d1 f4       	brne	.+52     	; 0x3ac <what_key_PD+0x56>
 378:	17 c0       	rjmp	.+46     	; 0x3a8 <what_key_PD+0x52>
 37a:	8b 3f       	cpi	r24, 0xFB	; 251
 37c:	59 f0       	breq	.+22     	; 0x394 <what_key_PD+0x3e>
 37e:	18 f4       	brcc	.+6      	; 0x386 <what_key_PD+0x30>
 380:	87 3f       	cpi	r24, 0xF7	; 247
 382:	51 f0       	breq	.+20     	; 0x398 <what_key_PD+0x42>
 384:	13 c0       	rjmp	.+38     	; 0x3ac <what_key_PD+0x56>
 386:	8d 3f       	cpi	r24, 0xFD	; 253
 388:	19 f0       	breq	.+6      	; 0x390 <what_key_PD+0x3a>
 38a:	8e 3f       	cpi	r24, 0xFE	; 254
 38c:	89 f0       	breq	.+34     	; 0x3b0 <what_key_PD+0x5a>
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <what_key_PD+0x56>
		case 0xFE:
			return 1;
			break;
			
		case 0xFD:
			return 2;
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	08 95       	ret
			break;
		
		case 0xFB:
			return 3;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	08 95       	ret
			break;
		
		case 0xF7:
			return 4;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	08 95       	ret
			break;
		
		case 0xEF:
			return 5;
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	08 95       	ret
			break;
		
		case 0xDF:
			return 6;
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	08 95       	ret
			break;
		
		case 0xBF:
			return 7;
 3a4:	87 e0       	ldi	r24, 0x07	; 7
 3a6:	08 95       	ret
			break;
		
		case 0x7F:
			return 8;
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	08 95       	ret
			break;
			
		default:
			return 20;
 3ac:	84 e1       	ldi	r24, 0x14	; 20
 3ae:	08 95       	ret
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
	
	switch(in_PD){
		case 0xFE:
			return 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
			
		default:
			return 20;
			break;
	}
}
 3b2:	08 95       	ret

000003b4 <what_key_PE>:
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <what_key_PE+0x4>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <what_key_PE+0xa>
 3be:	00 00       	nop

uint8_t what_key_PE(void){
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
 3c0:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	
	switch(in_PE){
 3c4:	8b 3f       	cpi	r24, 0xFB	; 251
 3c6:	59 f0       	breq	.+22     	; 0x3de <what_key_PE+0x2a>
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <what_key_PE+0x1c>
 3ca:	87 3f       	cpi	r24, 0xF7	; 247
 3cc:	51 f0       	breq	.+20     	; 0x3e2 <what_key_PE+0x2e>
 3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <what_key_PE+0x32>
 3d0:	8d 3f       	cpi	r24, 0xFD	; 253
 3d2:	19 f0       	breq	.+6      	; 0x3da <what_key_PE+0x26>
 3d4:	8e 3f       	cpi	r24, 0xFE	; 254
 3d6:	49 f0       	breq	.+18     	; 0x3ea <what_key_PE+0x36>
 3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <what_key_PE+0x32>
		case 0xFE: //PE0
		return 9;
		break;
		
		case 0xFD: //PE1
		return 0;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
		break;
		
		case 0xFB: //PE2
		return ok;
 3de:	8c e0       	ldi	r24, 0x0C	; 12
 3e0:	08 95       	ret
		break;
		
		case 0xF7: //PE3
		return reset;
 3e2:	8b e0       	ldi	r24, 0x0B	; 11
 3e4:	08 95       	ret
		break;
		
		default:
		return fault;
 3e6:	84 e1       	ldi	r24, 0x14	; 20
 3e8:	08 95       	ret
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
	
	switch(in_PE){
		case 0xFE: //PE0
		return 9;
 3ea:	89 e0       	ldi	r24, 0x09	; 9
		
		default:
		return fault;
		break;
	}
}
 3ec:	08 95       	ret

000003ee <password_check>:
uint8_t password_check(uint8_t key){
	static uint8_t password_compare[password_length];// = {1,1,1,1,1};
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
 3ee:	8c 30       	cpi	r24, 0x0C	; 12
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <password_check+0x6>
 3f2:	66 c0       	rjmp	.+204    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 3f4:	85 e0       	ldi	r24, 0x05	; 5
		for (uint8_t i = 0; i < 5; i++)
		{
			green_on;
 3f6:	e0 e0       	ldi	r30, 0x00	; 0
 3f8:	fb e0       	ldi	r31, 0x0B	; 11
 3fa:	2a ef       	ldi	r18, 0xFA	; 250
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	20 af       	std	Z+56, r18	; 0x38
 400:	31 af       	std	Z+57, r19	; 0x39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 402:	4f ef       	ldi	r20, 0xFF	; 255
 404:	53 ef       	ldi	r21, 0xF3	; 243
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	41 50       	subi	r20, 0x01	; 1
 40a:	50 40       	sbci	r21, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
			_delay_ms(20);
			green_off;
 414:	10 ae       	std	Z+56, r1	; 0x38
 416:	11 ae       	std	Z+57, r1	; 0x39
 418:	4f ef       	ldi	r20, 0xFF	; 255
 41a:	53 ef       	ldi	r21, 0xF3	; 243
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	41 50       	subi	r20, 0x01	; 1
 420:	50 40       	sbci	r21, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	81 50       	subi	r24, 0x01	; 1
	static uint8_t password_compare[password_length];// = {1,1,1,1,1};
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
		for (uint8_t i = 0; i < 5; i++)
 42c:	41 f7       	brne	.-48     	; 0x3fe <password_check+0x10>
 42e:	9d c0       	rjmp	.+314    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
		}
		_delay_ms(500);
		//if (!(n == (password_length))) return 0;
		if (n >= password_length)
		{
			n = 0;
 430:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
 434:	85 e0       	ldi	r24, 0x05	; 5
			for (uint8_t i = 0; i < 5; i++)
			{
				red_on;
 436:	e0 e0       	ldi	r30, 0x00	; 0
 438:	fb e0       	ldi	r31, 0x0B	; 11
 43a:	2a ef       	ldi	r18, 0xFA	; 250
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	22 af       	std	Z+58, r18	; 0x3a
 440:	33 af       	std	Z+59, r19	; 0x3b
 442:	4f ef       	ldi	r20, 0xFF	; 255
 444:	57 e8       	ldi	r21, 0x87	; 135
 446:	93 e1       	ldi	r25, 0x13	; 19
 448:	41 50       	subi	r20, 0x01	; 1
 44a:	50 40       	sbci	r21, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
				_delay_ms(200);
				red_off;
 454:	12 ae       	std	Z+58, r1	; 0x3a
 456:	13 ae       	std	Z+59, r1	; 0x3b
 458:	4f ef       	ldi	r20, 0xFF	; 255
 45a:	57 e8       	ldi	r21, 0x87	; 135
 45c:	93 e1       	ldi	r25, 0x13	; 19
 45e:	41 50       	subi	r20, 0x01	; 1
 460:	50 40       	sbci	r21, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	81 50       	subi	r24, 0x01	; 1
		_delay_ms(500);
		//if (!(n == (password_length))) return 0;
		if (n >= password_length)
		{
			n = 0;
			for (uint8_t i = 0; i < 5; i++)
 46c:	41 f7       	brne	.-48     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 46e:	08 95       	ret
			return 0;
		}
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
 470:	21 91       	ld	r18, Z+
 472:	9d 91       	ld	r25, X+
 474:	29 13       	cpse	r18, r25
 476:	88 c0       	rjmp	.+272    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
			}
				
			return 0;
		}
		
		for (uint8_t i = 0; i < password_length; i++)
 478:	e4 17       	cp	r30, r20
 47a:	f5 07       	cpc	r31, r21
 47c:	c9 f7       	brne	.-14     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 47e:	85 e0       	ldi	r24, 0x05	; 5
				return 0;
			}
		}
		for (uint8_t i = 0; i < 5; i++)
		{
			green_on;
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	fb e0       	ldi	r31, 0x0B	; 11
 484:	2a ef       	ldi	r18, 0xFA	; 250
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	20 af       	std	Z+56, r18	; 0x38
 48a:	31 af       	std	Z+57, r19	; 0x39
 48c:	4f ef       	ldi	r20, 0xFF	; 255
 48e:	57 e8       	ldi	r21, 0x87	; 135
 490:	93 e1       	ldi	r25, 0x13	; 19
 492:	41 50       	subi	r20, 0x01	; 1
 494:	50 40       	sbci	r21, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
			_delay_ms(200);
			green_off;
 49e:	10 ae       	std	Z+56, r1	; 0x38
 4a0:	11 ae       	std	Z+57, r1	; 0x39
 4a2:	4f ef       	ldi	r20, 0xFF	; 255
 4a4:	57 e8       	ldi	r21, 0x87	; 135
 4a6:	93 e1       	ldi	r25, 0x13	; 19
 4a8:	41 50       	subi	r20, 0x01	; 1
 4aa:	50 40       	sbci	r21, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
 4b4:	81 50       	subi	r24, 0x01	; 1
			if (!(password[i] == password_compare[i])) 
			{
				return 0;
			}
		}
		for (uint8_t i = 0; i < 5; i++)
 4b6:	41 f7       	brne	.-48     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			green_on;
			_delay_ms(200);
			green_off;
			_delay_ms(200);
		}
		n = 0;
 4b8:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
		return 1;
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	08 95       	ret
	}
	
	// reset the password if the reset key is pressed
	if (key == reset)
 4c0:	8b 30       	cpi	r24, 0x0B	; 11
 4c2:	21 f4       	brne	.+8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	{
		n = 0;
 4c4:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
		return 0;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
	}
	
	if (n == password_length)
 4cc:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <n.3984>
 4d0:	95 30       	cpi	r25, 0x05	; 5
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	{
		n = 0;
 4d4:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <n.3984>
		//}
		//return 0;
	}
	
	// add number in password checker
	password_compare[n] = key;
 4d8:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <n.3984>
 4dc:	e9 2f       	mov	r30, r25
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	ee 5d       	subi	r30, 0xDE	; 222
 4e2:	ff 4d       	sbci	r31, 0xDF	; 223
 4e4:	80 83       	st	Z, r24
	n++;
 4e6:	9f 5f       	subi	r25, 0xFF	; 255
 4e8:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <n.3984>
	for (uint8_t i = 0; i < 2; i++)
	{
		green_on;
 4ec:	e0 e0       	ldi	r30, 0x00	; 0
 4ee:	fb e0       	ldi	r31, 0x0B	; 11
 4f0:	8a ef       	ldi	r24, 0xFA	; 250
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	80 af       	std	Z+56, r24	; 0x38
 4f6:	91 af       	std	Z+57, r25	; 0x39
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	37 e8       	ldi	r19, 0x87	; 135
 4fc:	43 e1       	ldi	r20, 0x13	; 19
 4fe:	21 50       	subi	r18, 0x01	; 1
 500:	30 40       	sbci	r19, 0x00	; 0
 502:	40 40       	sbci	r20, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 508:	00 00       	nop
		_delay_ms(200);
		green_off;
 50a:	10 ae       	std	Z+56, r1	; 0x38
 50c:	11 ae       	std	Z+57, r1	; 0x39
 50e:	5f ef       	ldi	r21, 0xFF	; 255
 510:	27 e8       	ldi	r18, 0x87	; 135
 512:	33 e1       	ldi	r19, 0x13	; 19
 514:	51 50       	subi	r21, 0x01	; 1
 516:	20 40       	sbci	r18, 0x00	; 0
 518:	30 40       	sbci	r19, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51e:	00 00       	nop
	// add number in password checker
	password_compare[n] = key;
	n++;
	for (uint8_t i = 0; i < 2; i++)
	{
		green_on;
 520:	80 af       	std	Z+56, r24	; 0x38
 522:	91 af       	std	Z+57, r25	; 0x39
 524:	4f ef       	ldi	r20, 0xFF	; 255
 526:	57 e8       	ldi	r21, 0x87	; 135
 528:	83 e1       	ldi	r24, 0x13	; 19
 52a:	41 50       	subi	r20, 0x01	; 1
 52c:	50 40       	sbci	r21, 0x00	; 0
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	e1 f7       	brne	.-8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 532:	00 c0       	rjmp	.+0      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 534:	00 00       	nop
		_delay_ms(200);
		green_off;
 536:	10 ae       	std	Z+56, r1	; 0x38
 538:	11 ae       	std	Z+57, r1	; 0x39
 53a:	9f ef       	ldi	r25, 0xFF	; 255
 53c:	27 e8       	ldi	r18, 0x87	; 135
 53e:	33 e1       	ldi	r19, 0x13	; 19
 540:	91 50       	subi	r25, 0x01	; 1
 542:	20 40       	sbci	r18, 0x00	; 0
 544:	30 40       	sbci	r19, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 54a:	00 00       	nop
		_delay_ms(200);
	}
	return 2;
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	08 95       	ret
			return 0;
		}
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
 550:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 554:	90 91 22 20 	lds	r25, 0x2022	; 0x802022 <__data_end>
 558:	29 13       	cpse	r18, r25
 55a:	16 c0       	rjmp	.+44     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 55c:	e1 e0       	ldi	r30, 0x01	; 1
 55e:	f0 e2       	ldi	r31, 0x20	; 32
 560:	a3 e2       	ldi	r26, 0x23	; 35
 562:	b0 e2       	ldi	r27, 0x20	; 32
 564:	45 e0       	ldi	r20, 0x05	; 5
 566:	50 e2       	ldi	r21, 0x20	; 32
 568:	83 cf       	rjmp	.-250    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 56a:	4f ef       	ldi	r20, 0xFF	; 255
 56c:	53 ed       	ldi	r21, 0xD3	; 211
 56e:	90 e3       	ldi	r25, 0x30	; 48
 570:	41 50       	subi	r20, 0x01	; 1
 572:	50 40       	sbci	r21, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 57a:	00 00       	nop
			green_off;
			_delay_ms(20);
		}
		_delay_ms(500);
		//if (!(n == (password_length))) return 0;
		if (n >= password_length)
 57c:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <n.3984>
 580:	95 30       	cpi	r25, 0x05	; 5
 582:	08 f0       	brcs	.+2      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 584:	55 cf       	rjmp	.-342    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 586:	e4 cf       	rjmp	.-56     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
		_delay_ms(200);
		green_off;
		_delay_ms(200);
	}
	return 2;
}
 588:	08 95       	ret

0000058a <open_door>:

void open_door(uint8_t val){
 58a:	08 95       	ret

0000058c <init_nrf>:
	}
}

void init_nrf(void)
{
	nrfspiInit();                                        // Initialize SPI
 58c:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiInit>
	nrfBegin();                                          // Initialize radio module
 590:	0e 94 0d 05 	call	0xa1a	; 0xa1a <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc,               // Auto Retransmission Delay: 1000 us
 594:	68 e0       	ldi	r22, 0x08	; 8
 596:	80 e3       	ldi	r24, 0x30	; 48
 598:	0e 94 03 05 	call	0xa06	; 0xa06 <nrfSetRetries>
	NRF_SETUP_ARC_8RETRANSMIT_gc);						 // Auto Retransmission Count: 8 retries
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);             // Power Control: -6 dBm
 59c:	84 e0       	ldi	r24, 0x04	; 4
 59e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);          // Data Rate: 250 Kbps
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	0e 94 df 04 	call	0x9be	; 0x9be <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);               // CRC Check
 5a8:	8c e0       	ldi	r24, 0x0C	; 12
 5aa:	0e 94 f5 04 	call	0x9ea	; 0x9ea <nrfSetCRCLength>
	nrfSetChannel(54);                                   // Channel: 54
 5ae:	86 e3       	ldi	r24, 0x36	; 54
 5b0:	0e 94 b9 04 	call	0x972	; 0x972 <nrfSetChannel>
	nrfSetAutoAck(1);                                    // Auto Acknowledge on
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 c5 04 	call	0x98a	; 0x98a <nrfSetAutoAck>
	nrfEnableDynamicPayloads();                          // Enable Dynamic Payloads
 5ba:	0e 94 96 04 	call	0x92c	; 0x92c <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();                             // Clear interrupt bits
 5be:	0e 94 08 05 	call	0xa10	; 0xa10 <nrfClearInterruptBits>
	nrfFlushRx();                                        // Flush fifo's
 5c2:	0e 94 02 04 	call	0x804	; 0x804 <nrfFlushRx>
	nrfFlushTx();
 5c6:	0e 94 11 04 	call	0x822	; 0x822 <nrfFlushTx>

	nrfOpenWritingPipe(pipe);                            // Pipe for sending
 5ca:	87 e0       	ldi	r24, 0x07	; 7
 5cc:	90 e2       	ldi	r25, 0x20	; 32
 5ce:	0e 94 20 04 	call	0x840	; 0x840 <nrfOpenWritingPipe>
	nrfOpenReadingPipe(0, pipe);                         // Necessary for acknowledge
 5d2:	67 e0       	ldi	r22, 0x07	; 7
 5d4:	70 e2       	ldi	r23, 0x20	; 32
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0e 94 3e 04 	call	0x87c	; 0x87c <nrfOpenReadingPipe>
	
	// Interrupt
	PORTF.INT0MASK  = PIN6_bm;
 5dc:	e0 ea       	ldi	r30, 0xA0	; 160
 5de:	f6 e0       	ldi	r31, 0x06	; 6
 5e0:	80 e4       	ldi	r24, 0x40	; 64
 5e2:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.PIN6CTRL  = PORT_ISC_FALLING_gc;
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.INTCTRL   = PORT_INT0LVL_LO_gc;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	81 87       	std	Z+9, r24	; 0x09
 5ec:	08 95       	ret

000005ee <main>:
 *          which has a 16 MHz crystal 
 *
 * \return void
 */
void inline init_clock(void) {
  Config32MHzClock_Ext16M();
 5ee:	0e 94 21 01 	call	0x242	; 0x242 <Config32MHzClock_Ext16M>
	// init nrf
	// init keypad
	// init hall effect sensor
	// init sleep mode
	init_clock();
    init_nrf();
 5f2:	0e 94 c6 02 	call	0x58c	; 0x58c <init_nrf>
	init_keypad();
 5f6:	0e 94 43 01 	call	0x286	; 0x286 <init_keypad>
	init_LED();
 5fa:	0e 94 a6 01 	call	0x34c	; 0x34c <init_LED>
	PORTC.DIRSET = PIN0_bm;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	// enable global interrupts
	// enter idle mode

	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
 604:	e0 ea       	ldi	r30, 0xA0	; 160
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	82 81       	ldd	r24, Z+2	; 0x02
 60a:	83 60       	ori	r24, 0x03	; 3
 60c:	82 83       	std	Z+2, r24	; 0x02
	sei();
 60e:	78 94       	sei
 610:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <state>
 614:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <state+0x1>
			case 1:
				//send over NRF
				//enter idle mode
				break;
			default:
				state = 1;
 618:	31 e0       	ldi	r19, 0x01	; 1
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <main+0x34>
 61e:	83 2f       	mov	r24, r19
 620:	92 2f       	mov	r25, r18
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
	sei();
	
    while (1) 
    {
		switch (state)
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	91 05       	cpc	r25, r1
 626:	e8 f3       	brcs	.-6      	; 0x622 <main+0x34>
 628:	fa cf       	rjmp	.-12     	; 0x61e <main+0x30>

0000062a <__vector_104>:
	PORTF.PIN6CTRL  = PORT_ISC_FALLING_gc;
	PORTF.INTCTRL   = PORT_INT0LVL_LO_gc;
}

// ISR for the NRF
ISR(PORTF_INT0_vect){
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	11 24       	eor	r1, r1
	// nrf what happened
	// react to message
	// go back to idle mode
}
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__vector_64>:

// ISR for the keypad on port D
ISR(PORTD_INT0_vect){
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	0b b6       	in	r0, 0x3b	; 59
 64a:	0f 92       	push	r0
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
	cli();
 664:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key = what_key_PD();
 666:	0e 94 ab 01 	call	0x356	; 0x356 <what_key_PD>
	// add key press to password check
	door = password_check(key);
 66a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <password_check>
	// correct open door and show green led
	open_door(door);
 66e:	0e 94 c5 02 	call	0x58a	; 0x58a <open_door>
	// go back to idle mode
	sei();
 672:	78 94       	sei
}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0b be       	out	0x3b, r0	; 59
 690:	0f 90       	pop	r0
 692:	0f be       	out	0x3f, r0	; 63
 694:	0f 90       	pop	r0
 696:	1f 90       	pop	r1
 698:	18 95       	reti

0000069a <__vector_43>:

// ISR for the keypad on port E
ISR(PORTE_INT0_vect){
 69a:	1f 92       	push	r1
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	11 24       	eor	r1, r1
 6a4:	0b b6       	in	r0, 0x3b	; 59
 6a6:	0f 92       	push	r0
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
	cli();
 6c0:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key = what_key_PE();
 6c2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <what_key_PE>
	// add key press to password check
	door = password_check(key);
 6c6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <password_check>
	// correct open door and show green led
	open_door(door);
 6ca:	0e 94 c5 02 	call	0x58a	; 0x58a <open_door>
	// go back to idle mode
	sei();
 6ce:	78 94       	sei
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0b be       	out	0x3b, r0	; 59
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_66>:

// ISR for last person out button
ISR(PORTA_INT0_vect){
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
	// make state 0
	state = 0;
 700:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <state>
 704:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <state+0x1>
}
 708:	0f 90       	pop	r0
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	0f 90       	pop	r0
 70e:	1f 90       	pop	r1
 710:	18 95       	reti

00000712 <__vector_77>:

// ISR for TCD0 OVF
ISR(TCD0_OVF_vect){
 712:	1f 92       	push	r1
 714:	0f 92       	push	r0
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	0f 92       	push	r0
 71a:	11 24       	eor	r1, r1
 71c:	0b b6       	in	r0, 0x3b	; 59
 71e:	0f 92       	push	r0
 720:	8f 93       	push	r24
 722:	ef 93       	push	r30
 724:	ff 93       	push	r31
	// disable TCD0
	TCD0.CTRLA = TC_CLKSEL_OFF_gc;
 726:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
	// lock door
	PORTB.OUTCLR = PIN0_bm;
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
	// led's off
	red_off;
 730:	e0 e0       	ldi	r30, 0x00	; 0
 732:	fb e0       	ldi	r31, 0x0B	; 11
 734:	12 ae       	std	Z+58, r1	; 0x3a
 736:	13 ae       	std	Z+59, r1	; 0x3b
	green_off;
 738:	10 ae       	std	Z+56, r1	; 0x38
 73a:	11 ae       	std	Z+57, r1	; 0x39
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	8f 91       	pop	r24
 742:	0f 90       	pop	r0
 744:	0b be       	out	0x3b, r0	; 59
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	c0 ea       	ldi	r28, 0xA0	; 160
 758:	d6 e0       	ldi	r29, 0x06	; 6
 75a:	10 e2       	ldi	r17, 0x20	; 32
 75c:	1e 83       	std	Y+6, r17	; 0x06
 75e:	8f 71       	andi	r24, 0x1F	; 31
 760:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 764:	8f ef       	ldi	r24, 0xFF	; 255
 766:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 76a:	1d 83       	std	Y+5, r17	; 0x05
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	08 95       	ret

00000774 <nrfWriteRegisterMulti>:
 774:	df 92       	push	r13
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	7b 01       	movw	r14, r22
 784:	c4 2f       	mov	r28, r20
 786:	90 e2       	ldi	r25, 0x20	; 32
 788:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 78c:	8f 71       	andi	r24, 0x1F	; 31
 78e:	80 62       	ori	r24, 0x20	; 32
 790:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 794:	d8 2e       	mov	r13, r24
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	8c 0f       	add	r24, r28
 79a:	cc 23       	and	r28, r28
 79c:	69 f0       	breq	.+26     	; 0x7b8 <nrfWriteRegisterMulti+0x44>
 79e:	e7 01       	movw	r28, r14
 7a0:	08 2f       	mov	r16, r24
 7a2:	10 e0       	ldi	r17, 0x00	; 0
 7a4:	0f 5f       	subi	r16, 0xFF	; 255
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	0e 0d       	add	r16, r14
 7aa:	1f 1d       	adc	r17, r15
 7ac:	89 91       	ld	r24, Y+
 7ae:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 7b2:	c0 17       	cp	r28, r16
 7b4:	d1 07       	cpc	r29, r17
 7b6:	d1 f7       	brne	.-12     	; 0x7ac <nrfWriteRegisterMulti+0x38>
 7b8:	80 e2       	ldi	r24, 0x20	; 32
 7ba:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 7be:	8d 2d       	mov	r24, r13
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	08 95       	ret

000007d0 <nrfWriteRegister>:
 7d0:	ff 92       	push	r15
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	f6 2e       	mov	r15, r22
 7dc:	c0 ea       	ldi	r28, 0xA0	; 160
 7de:	d6 e0       	ldi	r29, 0x06	; 6
 7e0:	10 e2       	ldi	r17, 0x20	; 32
 7e2:	1e 83       	std	Y+6, r17	; 0x06
 7e4:	8f 71       	andi	r24, 0x1F	; 31
 7e6:	80 62       	ori	r24, 0x20	; 32
 7e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 7ec:	08 2f       	mov	r16, r24
 7ee:	8f 2d       	mov	r24, r15
 7f0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 7f4:	1d 83       	std	Y+5, r17	; 0x05
 7f6:	80 2f       	mov	r24, r16
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	08 95       	ret

00000804 <nrfFlushRx>:
 804:	1f 93       	push	r17
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	c0 ea       	ldi	r28, 0xA0	; 160
 80c:	d6 e0       	ldi	r29, 0x06	; 6
 80e:	10 e2       	ldi	r17, 0x20	; 32
 810:	1e 83       	std	Y+6, r17	; 0x06
 812:	82 ee       	ldi	r24, 0xE2	; 226
 814:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 818:	1d 83       	std	Y+5, r17	; 0x05
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	1f 91       	pop	r17
 820:	08 95       	ret

00000822 <nrfFlushTx>:
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	c0 ea       	ldi	r28, 0xA0	; 160
 82a:	d6 e0       	ldi	r29, 0x06	; 6
 82c:	10 e2       	ldi	r17, 0x20	; 32
 82e:	1e 83       	std	Y+6, r17	; 0x06
 830:	81 ee       	ldi	r24, 0xE1	; 225
 832:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 836:	1d 83       	std	Y+5, r17	; 0x05
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	08 95       	ret

00000840 <nrfOpenWritingPipe>:
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	ec 01       	movw	r28, r24
 846:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 84a:	bc 01       	movw	r22, r24
 84c:	8a e0       	ldi	r24, 0x0A	; 10
 84e:	0e 94 ba 03 	call	0x774	; 0x774 <nrfWriteRegisterMulti>
 852:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 856:	be 01       	movw	r22, r28
 858:	80 e1       	ldi	r24, 0x10	; 16
 85a:	0e 94 ba 03 	call	0x774	; 0x774 <nrfWriteRegisterMulti>
 85e:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
 862:	60 32       	cpi	r22, 0x20	; 32
 864:	20 f4       	brcc	.+8      	; 0x86e <nrfOpenWritingPipe+0x2e>
 866:	81 e1       	ldi	r24, 0x11	; 17
 868:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 86c:	04 c0       	rjmp	.+8      	; 0x876 <nrfOpenWritingPipe+0x36>
 86e:	60 e2       	ldi	r22, 0x20	; 32
 870:	81 e1       	ldi	r24, 0x11	; 17
 872:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

0000087c <nrfOpenReadingPipe>:
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	c8 2f       	mov	r28, r24
 886:	8b 01       	movw	r16, r22
 888:	81 11       	cpse	r24, r1
 88a:	08 c0       	rjmp	.+16     	; 0x89c <nrfOpenReadingPipe+0x20>
 88c:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	88 e2       	ldi	r24, 0x28	; 40
 894:	90 e2       	ldi	r25, 0x20	; 32
 896:	0e 94 5e 05 	call	0xabc	; 0xabc <memcpy>
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <nrfOpenReadingPipe+0x28>
 89c:	87 30       	cpi	r24, 0x07	; 7
 89e:	78 f5       	brcc	.+94     	; 0x8fe <nrfOpenReadingPipe+0x82>
 8a0:	82 30       	cpi	r24, 0x02	; 2
 8a2:	58 f4       	brcc	.+22     	; 0x8ba <nrfOpenReadingPipe+0x3e>
 8a4:	ec 2f       	mov	r30, r28
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	e5 5e       	subi	r30, 0xE5	; 229
 8aa:	ff 4d       	sbci	r31, 0xDF	; 223
 8ac:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
 8b0:	b8 01       	movw	r22, r16
 8b2:	80 81       	ld	r24, Z
 8b4:	0e 94 ba 03 	call	0x774	; 0x774 <nrfWriteRegisterMulti>
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <nrfOpenReadingPipe+0x4e>
 8ba:	e8 2f       	mov	r30, r24
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	e5 5e       	subi	r30, 0xE5	; 229
 8c0:	ff 4d       	sbci	r31, 0xDF	; 223
 8c2:	41 e0       	ldi	r20, 0x01	; 1
 8c4:	80 81       	ld	r24, Z
 8c6:	0e 94 ba 03 	call	0x774	; 0x774 <nrfWriteRegisterMulti>
 8ca:	d0 e0       	ldi	r29, 0x00	; 0
 8cc:	fe 01       	movw	r30, r28
 8ce:	eb 5e       	subi	r30, 0xEB	; 235
 8d0:	ff 4d       	sbci	r31, 0xDF	; 223
 8d2:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
 8d6:	80 81       	ld	r24, Z
 8d8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 8e2:	c1 5f       	subi	r28, 0xF1	; 241
 8e4:	df 4d       	sbci	r29, 0xDF	; 223
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	08 80       	ld	r0, Y
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <nrfOpenReadingPipe+0x76>
 8ee:	66 0f       	add	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	0a 94       	dec	r0
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <nrfOpenReadingPipe+0x72>
 8f6:	68 2b       	or	r22, r24
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	08 95       	ret

00000908 <nrfToggleFeatures>:
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	c0 ea       	ldi	r28, 0xA0	; 160
 910:	d6 e0       	ldi	r29, 0x06	; 6
 912:	10 e2       	ldi	r17, 0x20	; 32
 914:	1e 83       	std	Y+6, r17	; 0x06
 916:	80 e5       	ldi	r24, 0x50	; 80
 918:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 91c:	83 e7       	ldi	r24, 0x73	; 115
 91e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <nrfspiTransfer>
 922:	1d 83       	std	Y+5, r17	; 0x05
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	08 95       	ret

0000092c <nrfEnableDynamicPayloads>:
 92c:	8d e1       	ldi	r24, 0x1D	; 29
 92e:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 932:	68 2f       	mov	r22, r24
 934:	64 60       	ori	r22, 0x04	; 4
 936:	8d e1       	ldi	r24, 0x1D	; 29
 938:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 93c:	8d e1       	ldi	r24, 0x1D	; 29
 93e:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 942:	81 11       	cpse	r24, r1
 944:	0a c0       	rjmp	.+20     	; 0x95a <nrfEnableDynamicPayloads+0x2e>
 946:	0e 94 84 04 	call	0x908	; 0x908 <nrfToggleFeatures>
 94a:	8d e1       	ldi	r24, 0x1D	; 29
 94c:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 950:	68 2f       	mov	r22, r24
 952:	64 60       	ori	r22, 0x04	; 4
 954:	8d e1       	ldi	r24, 0x1D	; 29
 956:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 95a:	8c e1       	ldi	r24, 0x1C	; 28
 95c:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 960:	68 2f       	mov	r22, r24
 962:	6f 63       	ori	r22, 0x3F	; 63
 964:	8c e1       	ldi	r24, 0x1C	; 28
 966:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <dynamic_payloads_enabled>
 970:	08 95       	ret

00000972 <nrfSetChannel>:
 972:	88 23       	and	r24, r24
 974:	2c f0       	brlt	.+10     	; 0x980 <nrfSetChannel+0xe>
 976:	68 2f       	mov	r22, r24
 978:	85 e0       	ldi	r24, 0x05	; 5
 97a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 97e:	08 95       	ret
 980:	6f e7       	ldi	r22, 0x7F	; 127
 982:	85 e0       	ldi	r24, 0x05	; 5
 984:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 988:	08 95       	ret

0000098a <nrfSetAutoAck>:
 98a:	88 23       	and	r24, r24
 98c:	29 f0       	breq	.+10     	; 0x998 <nrfSetAutoAck+0xe>
 98e:	6f e3       	ldi	r22, 0x3F	; 63
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 996:	08 95       	ret
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 9a0:	08 95       	ret

000009a2 <nrfSetPALevel>:
 9a2:	cf 93       	push	r28
 9a4:	c8 2f       	mov	r28, r24
 9a6:	86 e0       	ldi	r24, 0x06	; 6
 9a8:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 9ac:	89 7f       	andi	r24, 0xF9	; 249
 9ae:	c6 70       	andi	r28, 0x06	; 6
 9b0:	68 2f       	mov	r22, r24
 9b2:	6c 2b       	or	r22, r28
 9b4:	86 e0       	ldi	r24, 0x06	; 6
 9b6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 9ba:	cf 91       	pop	r28
 9bc:	08 95       	ret

000009be <nrfSetDataRate>:
 9be:	cf 93       	push	r28
 9c0:	c8 2f       	mov	r28, r24
 9c2:	86 e0       	ldi	r24, 0x06	; 6
 9c4:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 9c8:	87 7d       	andi	r24, 0xD7	; 215
 9ca:	9c 2f       	mov	r25, r28
 9cc:	98 72       	andi	r25, 0x28	; 40
 9ce:	68 2f       	mov	r22, r24
 9d0:	69 2b       	or	r22, r25
 9d2:	86 e0       	ldi	r24, 0x06	; 6
 9d4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 9d8:	86 e0       	ldi	r24, 0x06	; 6
 9da:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 9de:	91 e0       	ldi	r25, 0x01	; 1
 9e0:	c8 13       	cpse	r28, r24
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	89 2f       	mov	r24, r25
 9e6:	cf 91       	pop	r28
 9e8:	08 95       	ret

000009ea <nrfSetCRCLength>:
 9ea:	cf 93       	push	r28
 9ec:	c8 2f       	mov	r28, r24
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	0e 94 a8 03 	call	0x750	; 0x750 <nrfReadRegister>
 9f4:	83 7f       	andi	r24, 0xF3	; 243
 9f6:	cc 70       	andi	r28, 0x0C	; 12
 9f8:	68 2f       	mov	r22, r24
 9fa:	6c 2b       	or	r22, r28
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 a02:	cf 91       	pop	r28
 a04:	08 95       	ret

00000a06 <nrfSetRetries>:
 a06:	68 2b       	or	r22, r24
 a08:	84 e0       	ldi	r24, 0x04	; 4
 a0a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 a0e:	08 95       	ret

00000a10 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
 a10:	60 e7       	ldi	r22, 0x70	; 112
 a12:	87 e0       	ldi	r24, 0x07	; 7
 a14:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
 a18:	08 95       	ret

00000a1a <nrfBegin>:
 a1a:	8f e3       	ldi	r24, 0x3F	; 63
 a1c:	9c e9       	ldi	r25, 0x9C	; 156
 a1e:	01 97       	sbiw	r24, 0x01	; 1
 a20:	f1 f7       	brne	.-4      	; 0xa1e <nrfBegin+0x4>
 a22:	00 c0       	rjmp	.+0      	; 0xa24 <nrfBegin+0xa>
 a24:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
 a26:	6f e5       	ldi	r22, 0x5F	; 95
 a28:	84 e0       	ldi	r24, 0x04	; 4
 a2a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
 a2e:	86 e0       	ldi	r24, 0x06	; 6
 a30:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	0e 94 df 04 	call	0x9be	; 0x9be <nrfSetDataRate>
 a3a:	88 23       	and	r24, r24
 a3c:	19 f0       	breq	.+6      	; 0xa44 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	0e 94 df 04 	call	0x9be	; 0x9be <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
 a4a:	8c e0       	ldi	r24, 0x0C	; 12
 a4c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	8c e1       	ldi	r24, 0x1C	; 28
 a54:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
 a58:	8c e4       	ldi	r24, 0x4C	; 76
 a5a:	0e 94 b9 04 	call	0x972	; 0x972 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
 a5e:	0e 94 08 05 	call	0xa10	; 0xa10 <nrfClearInterruptBits>
  nrfFlushRx();
 a62:	0e 94 02 04 	call	0x804	; 0x804 <nrfFlushRx>
  nrfFlushTx();
 a66:	0e 94 11 04 	call	0x822	; 0x822 <nrfFlushTx>
 a6a:	08 95       	ret

00000a6c <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
 a6c:	e0 e4       	ldi	r30, 0x40	; 64
 a6e:	f6 e0       	ldi	r31, 0x06	; 6
 a70:	88 e0       	ldi	r24, 0x08	; 8
 a72:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
 a74:	84 e0       	ldi	r24, 0x04	; 4
 a76:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
 a78:	82 e0       	ldi	r24, 0x02	; 2
 a7a:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
 a7c:	e0 ea       	ldi	r30, 0xA0	; 160
 a7e:	f6 e0       	ldi	r31, 0x06	; 6
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
 a84:	80 e4       	ldi	r24, 0x40	; 64
 a86:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
 a88:	80 e8       	ldi	r24, 0x80	; 128
 a8a:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 a8c:	e0 ea       	ldi	r30, 0xA0	; 160
 a8e:	f8 e0       	ldi	r31, 0x08	; 8
 a90:	88 e1       	ldi	r24, 0x18	; 24
 a92:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
 a94:	80 ec       	ldi	r24, 0xC0	; 192
 a96:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
 a98:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	86 83       	std	Z+6, r24	; 0x06
 a9e:	08 95       	ret

00000aa0 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
 aa0:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
 aa4:	e0 ea       	ldi	r30, 0xA0	; 160
 aa6:	f8 e0       	ldi	r31, 0x08	; 8
 aa8:	81 81       	ldd	r24, Z+1	; 0x01
 aaa:	86 ff       	sbrs	r24, 6
 aac:	fd cf       	rjmp	.-6      	; 0xaa8 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
 aae:	e0 ea       	ldi	r30, 0xA0	; 160
 ab0:	f8 e0       	ldi	r31, 0x08	; 8
 ab2:	81 81       	ldd	r24, Z+1	; 0x01
 ab4:	80 64       	ori	r24, 0x40	; 64
 ab6:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
 ab8:	80 81       	ld	r24, Z
}
 aba:	08 95       	ret

00000abc <memcpy>:
 abc:	fb 01       	movw	r30, r22
 abe:	dc 01       	movw	r26, r24
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <memcpy+0xa>
 ac2:	01 90       	ld	r0, Z+
 ac4:	0d 92       	st	X+, r0
 ac6:	41 50       	subi	r20, 0x01	; 1
 ac8:	50 40       	sbci	r21, 0x00	; 0
 aca:	d8 f7       	brcc	.-10     	; 0xac2 <memcpy+0x6>
 acc:	08 95       	ret

00000ace <_exit>:
 ace:	f8 94       	cli

00000ad0 <__stop_program>:
 ad0:	ff cf       	rjmp	.-2      	; 0xad0 <__stop_program>
