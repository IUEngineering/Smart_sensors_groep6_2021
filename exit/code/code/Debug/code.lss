
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00802000  00000cde  00000d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080202a  0080202a  00000d9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000075f6  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b4c  00000000  00000000  000086ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bea  00000000  00000000  0000c216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007fc  00000000  00000000  0000de00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ba5  00000000  00000000  0000e5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002235  00000000  00000000  000121a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  000143d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_43>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_64>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_66>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__vector_77>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_104>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ee ed       	ldi	r30, 0xDE	; 222
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	aa 32       	cpi	r26, 0x2A	; 42
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	aa e2       	ldi	r26, 0x2A	; 42
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a1 33       	cpi	r26, 0x31	; 49
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <main>
 23a:	0c 94 6d 06 	jmp	0xcda	; 0xcda <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |                   // Select frequency range
 242:	e0 e5       	ldi	r30, 0x50	; 80
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	8b ec       	ldi	r24, 0xCB	; 203
 248:	82 83       	std	Z+2, r24	; 0x02
                 OSC_XOSCSEL_XTAL_16KCLK_gc;                // Select start-up time
  OSC.CTRL |= OSC_XOSCEN_bm;                                // Enable oscillator
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );                // Wait for oscillator is ready
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	83 ff       	sbrs	r24, 3
 254:	fd cf       	rjmp	.-6      	; 0x250 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (OSC_PLLFAC_gm & 2);   // Select PLL source and multipl. factor
 256:	e0 e5       	ldi	r30, 0x50	; 80
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	82 ec       	ldi	r24, 0xC2	; 194
 25c:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL |= OSC_PLLEN_bm;                                 // Enable PLL
 25e:	80 81       	ld	r24, Z
 260:	80 61       	ori	r24, 0x10	; 16
 262:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );                 // Wait for PLL is ready
 264:	81 81       	ldd	r24, Z+1	; 0x01
 266:	84 ff       	sbrs	r24, 4
 268:	fd cf       	rjmp	.-6      	; 0x264 <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
 26a:	88 ed       	ldi	r24, 0xD8	; 216
 26c:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
 274:	e0 e5       	ldi	r30, 0x50	; 80
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <init_keypad>:
*/

// this is the password for the keypad!
uint8_t password[password_length] = {1, 1, 1, 1, 1};

void init_keypad(void){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	
	//set pin PA1 as input 
	PORTA.DIRCLR = PIN1_bm;
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d6 e0       	ldi	r29, 0x06	; 6
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	9a 83       	std	Y+2, r25	; 0x02
	
	//set pin PB0 as output
	PORTB.DIRSET = PIN0_bm;
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	40 93 21 06 	sts	0x0621, r20	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	
	//set port D as input
	PORTD.DIRCLR = 0xFF;
 298:	a0 e6       	ldi	r26, 0x60	; 96
 29a:	b6 e0       	ldi	r27, 0x06	; 6
 29c:	3f ef       	ldi	r19, 0xFF	; 255
 29e:	12 96       	adiw	r26, 0x02	; 2
 2a0:	3c 93       	st	X, r19
 2a2:	12 97       	sbiw	r26, 0x02	; 2
	
	//set E0, E1, E2, E3 as inputs
	PORTE.DIRCLR = 0x0F;
 2a4:	e0 e8       	ldi	r30, 0x80	; 128
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	2f e0       	ldi	r18, 0x0F	; 15
 2aa:	22 83       	std	Z+2, r18	; 0x02
	
	//for port A
	//configure input sense on falling edge
	PORTA.PIN1CTRL = PORT_ISC_BOTHEDGES_gc;
 2ac:	19 8a       	std	Y+17, r1	; 0x11
	
	//for port D 
	//use internal pull ups
	//configure input sense on falling edge
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ae:	8a e1       	ldi	r24, 0x1A	; 26
 2b0:	50 96       	adiw	r26, 0x10	; 16
 2b2:	8c 93       	st	X, r24
 2b4:	50 97       	sbiw	r26, 0x10	; 16
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2b6:	51 96       	adiw	r26, 0x11	; 17
 2b8:	8c 93       	st	X, r24
 2ba:	51 97       	sbiw	r26, 0x11	; 17
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2bc:	52 96       	adiw	r26, 0x12	; 18
 2be:	8c 93       	st	X, r24
 2c0:	52 97       	sbiw	r26, 0x12	; 18
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c2:	53 96       	adiw	r26, 0x13	; 19
 2c4:	8c 93       	st	X, r24
 2c6:	53 97       	sbiw	r26, 0x13	; 19
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c8:	54 96       	adiw	r26, 0x14	; 20
 2ca:	8c 93       	st	X, r24
 2cc:	54 97       	sbiw	r26, 0x14	; 20
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ce:	55 96       	adiw	r26, 0x15	; 21
 2d0:	8c 93       	st	X, r24
 2d2:	55 97       	sbiw	r26, 0x15	; 21
	PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2d4:	56 96       	adiw	r26, 0x16	; 22
 2d6:	8c 93       	st	X, r24
 2d8:	56 97       	sbiw	r26, 0x16	; 22
	PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2da:	57 96       	adiw	r26, 0x17	; 23
 2dc:	8c 93       	st	X, r24
 2de:	57 97       	sbiw	r26, 0x17	; 23
	
	//for port E
	//use internal pull ups
	//configure input sense on falling edge
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e0:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e2:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e4:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e6:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e8:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ea:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ec:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ee:	87 8b       	std	Z+23, r24	; 0x17
	
	//configure PA1 interrupt 0
	PORTA.INT0MASK = PIN1_bm;
 2f0:	9a 87       	std	Y+10, r25	; 0x0a
	PORTA.INTCTRL = PORT_INT0LVL_LO_gc;
 2f2:	49 87       	std	Y+9, r20	; 0x09
	
	//configure port D interrupt 0
	PORTD.INT0MASK = 0xFF;
 2f4:	1a 96       	adiw	r26, 0x0a	; 10
 2f6:	3c 93       	st	X, r19
 2f8:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.INTCTRL = PORT_INT0LVL_MED_gc;
 2fa:	19 96       	adiw	r26, 0x09	; 9
 2fc:	9c 93       	st	X, r25
	
	//configure port E interrupt 0
	PORTE.INT0MASK = 0x0F;
 2fe:	22 87       	std	Z+10, r18	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_MED_gc;
 300:	91 87       	std	Z+9, r25	; 0x09
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <init_timer_F0>:

void init_timer_F0(void){
	PORTF.DIRSET = PIN0_bm|PIN1_bm;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	TCF0.PER = 9999;
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	fb e0       	ldi	r31, 0x0B	; 11
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	97 e2       	ldi	r25, 0x27	; 39
 316:	86 a3       	std	Z+38, r24	; 0x26
 318:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.CTRLA = TC_CLKSEL_DIV8_gc;
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	80 83       	st	Z, r24
	TCF0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	81 83       	std	Z+1, r24	; 0x01
	TCF0.CCA = 0;
 322:	10 a6       	std	Z+40, r1	; 0x28
 324:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
 326:	12 a6       	std	Z+42, r1	; 0x2a
 328:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 10;
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	84 a7       	std	Z+44, r24	; 0x2c
 330:	95 a7       	std	Z+45, r25	; 0x2d
 332:	08 95       	ret

00000334 <init_timer_D0>:
}

void init_timer_D0(void){
	TCD0.CTRLA = TC_CLKSEL_OFF_gc;
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f9 e0       	ldi	r31, 0x09	; 9
 338:	10 82       	st	Z, r1
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	86 83       	std	Z+6, r24	; 0x06
	TCD0.CTRLB = TC_WGMODE_SS_gc;
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	81 83       	std	Z+1, r24	; 0x01
	TCD0.PER = 65535;  // 2^16 - 1
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	86 a3       	std	Z+38, r24	; 0x26
 348:	97 a3       	std	Z+39, r25	; 0x27
 34a:	08 95       	ret

0000034c <init_LED>:
}

void init_LED(void){
	init_timer_D0();
 34c:	0e 94 9a 01 	call	0x334	; 0x334 <init_timer_D0>
	init_timer_F0();
 350:	0e 94 84 01 	call	0x308	; 0x308 <init_timer_F0>
 354:	08 95       	ret

00000356 <what_key_PD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e9       	ldi	r24, 0x9F	; 159
 358:	9f e0       	ldi	r25, 0x0F	; 15
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <what_key_PD+0x4>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <what_key_PD+0xa>
 360:	00 00       	nop
}

uint8_t what_key_PD(void){
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
 362:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
	
	switch(in_PD){
 366:	8f 3e       	cpi	r24, 0xEF	; 239
 368:	c9 f0       	breq	.+50     	; 0x39c <what_key_PD+0x46>
 36a:	38 f4       	brcc	.+14     	; 0x37a <what_key_PD+0x24>
 36c:	8f 3b       	cpi	r24, 0xBF	; 191
 36e:	d1 f0       	breq	.+52     	; 0x3a4 <what_key_PD+0x4e>
 370:	8f 3d       	cpi	r24, 0xDF	; 223
 372:	b1 f0       	breq	.+44     	; 0x3a0 <what_key_PD+0x4a>
 374:	8f 37       	cpi	r24, 0x7F	; 127
 376:	d1 f4       	brne	.+52     	; 0x3ac <what_key_PD+0x56>
 378:	17 c0       	rjmp	.+46     	; 0x3a8 <what_key_PD+0x52>
 37a:	8b 3f       	cpi	r24, 0xFB	; 251
 37c:	59 f0       	breq	.+22     	; 0x394 <what_key_PD+0x3e>
 37e:	18 f4       	brcc	.+6      	; 0x386 <what_key_PD+0x30>
 380:	87 3f       	cpi	r24, 0xF7	; 247
 382:	51 f0       	breq	.+20     	; 0x398 <what_key_PD+0x42>
 384:	13 c0       	rjmp	.+38     	; 0x3ac <what_key_PD+0x56>
 386:	8d 3f       	cpi	r24, 0xFD	; 253
 388:	19 f0       	breq	.+6      	; 0x390 <what_key_PD+0x3a>
 38a:	8e 3f       	cpi	r24, 0xFE	; 254
 38c:	89 f0       	breq	.+34     	; 0x3b0 <what_key_PD+0x5a>
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <what_key_PD+0x56>
		case 0xFE:
			return 1;
			break;
			
		case 0xFD:
			return 2;
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	08 95       	ret
			break;
		
		case 0xFB:
			return 3;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	08 95       	ret
			break;
		
		case 0xF7:
			return 4;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	08 95       	ret
			break;
		
		case 0xEF:
			return 5;
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	08 95       	ret
			break;
		
		case 0xDF:
			return 6;
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	08 95       	ret
			break;
		
		case 0xBF:
			return 7;
 3a4:	87 e0       	ldi	r24, 0x07	; 7
 3a6:	08 95       	ret
			break;
		
		case 0x7F:
			return 8;
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	08 95       	ret
			break;
			
		default:
			return fault;
 3ac:	8d e0       	ldi	r24, 0x0D	; 13
 3ae:	08 95       	ret
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
	
	switch(in_PD){
		case 0xFE:
			return 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
			
		default:
			return fault;
			break;
	}
}
 3b2:	08 95       	ret

000003b4 <what_key_PE>:
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <what_key_PE+0x4>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <what_key_PE+0xa>
 3be:	00 00       	nop

uint8_t what_key_PE(void){
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
 3c0:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	
	switch(in_PE){
 3c4:	8b 3f       	cpi	r24, 0xFB	; 251
 3c6:	59 f0       	breq	.+22     	; 0x3de <what_key_PE+0x2a>
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <what_key_PE+0x1c>
 3ca:	87 3f       	cpi	r24, 0xF7	; 247
 3cc:	51 f0       	breq	.+20     	; 0x3e2 <what_key_PE+0x2e>
 3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <what_key_PE+0x32>
 3d0:	8d 3f       	cpi	r24, 0xFD	; 253
 3d2:	19 f0       	breq	.+6      	; 0x3da <what_key_PE+0x26>
 3d4:	8e 3f       	cpi	r24, 0xFE	; 254
 3d6:	49 f0       	breq	.+18     	; 0x3ea <what_key_PE+0x36>
 3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <what_key_PE+0x32>
		case 0xFE: //PE0
		return 9;
		break;
		
		case 0xFD: //PE1
		return 0;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
		break;
		
		case 0xFB: //PE2
		return ok;
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	08 95       	ret
		break;
		
		case 0xF7: //PE3
		return reset;
 3e2:	8b e0       	ldi	r24, 0x0B	; 11
 3e4:	08 95       	ret
		break;
		
		default:
		return fault;
 3e6:	8d e0       	ldi	r24, 0x0D	; 13
 3e8:	08 95       	ret
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
	
	switch(in_PE){
		case 0xFE: //PE0
		return 9;
 3ea:	89 e0       	ldi	r24, 0x09	; 9
		
		default:
		return fault;
		break;
	}
}
 3ec:	08 95       	ret

000003ee <reset_password>:

void reset_password(uint8_t *password_compare){
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	25 97       	sbiw	r28, 0x05	; 5
 3f8:	cd bf       	out	0x3d, r28	; 61
 3fa:	de bf       	out	0x3e, r29	; 62
	uint8_t wrong_default_password_compare[password_length] = {0,1,1,1,1};
 3fc:	25 e0       	ldi	r18, 0x05	; 5
 3fe:	e3 e1       	ldi	r30, 0x13	; 19
 400:	f0 e2       	ldi	r31, 0x20	; 32
 402:	de 01       	movw	r26, r28
 404:	11 96       	adiw	r26, 0x01	; 1
 406:	01 90       	ld	r0, Z+
 408:	0d 92       	st	X+, r0
 40a:	2a 95       	dec	r18
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	fe 01       	movw	r30, r28
 410:	31 96       	adiw	r30, 0x01	; 1
 412:	ae 01       	movw	r20, r28
 414:	4a 5f       	subi	r20, 0xFA	; 250
 416:	5f 4f       	sbci	r21, 0xFF	; 255
	for (uint8_t i = 0; i < password_length; i++)
	{
		*password_compare = wrong_default_password_compare[i];
 418:	21 91       	ld	r18, Z+
 41a:	dc 01       	movw	r26, r24
 41c:	2d 93       	st	X+, r18
 41e:	cd 01       	movw	r24, r26
	}
}

void reset_password(uint8_t *password_compare){
	uint8_t wrong_default_password_compare[password_length] = {0,1,1,1,1};
	for (uint8_t i = 0; i < password_length; i++)
 420:	e4 17       	cp	r30, r20
 422:	f5 07       	cpc	r31, r21
 424:	c9 f7       	brne	.-14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		*password_compare = wrong_default_password_compare[i];
		password_compare++;
	}
}
 426:	25 96       	adiw	r28, 0x05	; 5
 428:	cd bf       	out	0x3d, r28	; 61
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <password_check>:

uint8_t password_check(uint8_t key){
 432:	98 2f       	mov	r25, r24
	static uint8_t password_compare[password_length] = {0,1,1,1,1};
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
 434:	8a 30       	cpi	r24, 0x0A	; 10
 436:	d9 f4       	brne	.+54     	; 0x46e <password_check+0x3c>
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
 438:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <password>
 43c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 440:	98 13       	cpse	r25, r24
 442:	4c c0       	rjmp	.+152    	; 0x4dc <password_check+0xaa>
 444:	e6 e0       	ldi	r30, 0x06	; 6
 446:	f0 e2       	ldi	r31, 0x20	; 32
 448:	a1 e0       	ldi	r26, 0x01	; 1
 44a:	b0 e2       	ldi	r27, 0x20	; 32
 44c:	2a e0       	ldi	r18, 0x0A	; 10
 44e:	30 e2       	ldi	r19, 0x20	; 32
 450:	91 91       	ld	r25, Z+
 452:	8d 91       	ld	r24, X+
 454:	98 13       	cpse	r25, r24
 456:	44 c0       	rjmp	.+136    	; 0x4e0 <password_check+0xae>
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
		
		for (uint8_t i = 0; i < password_length; i++)
 458:	e2 17       	cp	r30, r18
 45a:	f3 07       	cpc	r31, r19
 45c:	c9 f7       	brne	.-14     	; 0x450 <password_check+0x1e>
			{
				return wrong_password;
			}
		}
		
		reset_password(password_compare);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e2       	ldi	r25, 0x20	; 32
 462:	0e 94 f7 01 	call	0x3ee	; 0x3ee <reset_password>
		n = 0;
 466:	10 92 2a 20 	sts	0x202A, r1	; 0x80202a <__data_end>
		return correct_password;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	08 95       	ret
	}
	
	// reset the password if the reset key is pressed
	if (key == reset)
 46e:	8b 30       	cpi	r24, 0x0B	; 11
 470:	21 f4       	brne	.+8      	; 0x47a <password_check+0x48>
	{
		n = 0;
 472:	10 92 2a 20 	sts	0x202A, r1	; 0x80202a <__data_end>
		return added_to_input;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
	}
	
	if (n == password_length)
 47a:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <__data_end>
 47e:	85 30       	cpi	r24, 0x05	; 5
 480:	19 f5       	brne	.+70     	; 0x4c8 <password_check+0x96>
	{
		n = 0;
 482:	10 92 2a 20 	sts	0x202A, r1	; 0x80202a <__data_end>
		for (uint8_t i = 0; i < 5; i++)
		{
			red_on;
 486:	e0 e0       	ldi	r30, 0x00	; 0
 488:	fb e0       	ldi	r31, 0x0B	; 11
 48a:	2a ef       	ldi	r18, 0xFA	; 250
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	22 af       	std	Z+58, r18	; 0x3a
 490:	33 af       	std	Z+59, r19	; 0x3b
			green_on;
 492:	20 af       	std	Z+56, r18	; 0x38
 494:	31 af       	std	Z+57, r19	; 0x39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 496:	4f ef       	ldi	r20, 0xFF	; 255
 498:	57 e8       	ldi	r21, 0x87	; 135
 49a:	93 e1       	ldi	r25, 0x13	; 19
 49c:	41 50       	subi	r20, 0x01	; 1
 49e:	50 40       	sbci	r21, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <password_check+0x6a>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <password_check+0x74>
 4a6:	00 00       	nop
			_delay_ms(200);
			red_off;
 4a8:	12 ae       	std	Z+58, r1	; 0x3a
 4aa:	13 ae       	std	Z+59, r1	; 0x3b
			green_off;
 4ac:	10 ae       	std	Z+56, r1	; 0x38
 4ae:	11 ae       	std	Z+57, r1	; 0x39
 4b0:	4f ef       	ldi	r20, 0xFF	; 255
 4b2:	53 ec       	ldi	r21, 0xC3	; 195
 4b4:	99 e0       	ldi	r25, 0x09	; 9
 4b6:	41 50       	subi	r20, 0x01	; 1
 4b8:	50 40       	sbci	r21, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <password_check+0x84>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <password_check+0x8e>
 4c0:	00 00       	nop
 4c2:	81 50       	subi	r24, 0x01	; 1
	}
	
	if (n == password_length)
	{
		n = 0;
		for (uint8_t i = 0; i < 5; i++)
 4c4:	21 f7       	brne	.-56     	; 0x48e <password_check+0x5c>
 4c6:	08 95       	ret
		}
		return added_to_input;
	}
	
	// add number in password checker
	password_compare[n] = key;
 4c8:	e8 2f       	mov	r30, r24
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	e0 50       	subi	r30, 0x00	; 0
 4ce:	f0 4e       	sbci	r31, 0xE0	; 224
 4d0:	90 83       	st	Z, r25
	n++;
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <__data_end>
	return added_to_input;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
			{
				return wrong_password;
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	08 95       	ret
 4e0:	82 e0       	ldi	r24, 0x02	; 2
	
	// add number in password checker
	password_compare[n] = key;
	n++;
	return added_to_input;
}
 4e2:	08 95       	ret

000004e4 <open_door>:

uint8_t open_door(uint8_t val){
	if (val == correct_password) {
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	b1 f4       	brne	.+44     	; 0x514 <open_door+0x30>
		// unlock door
		PORTB.OUTSET = PIN0_bm;
 4e8:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	33 ec       	ldi	r19, 0xC3	; 195
 4f0:	49 e0       	ldi	r20, 0x09	; 9
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	30 40       	sbci	r19, 0x00	; 0
 4f6:	40 40       	sbci	r20, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <open_door+0xe>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <open_door+0x18>
 4fc:	00 00       	nop
		// green led on
		_delay_ms(100);
		green_on;
 4fe:	8a ef       	ldi	r24, 0xFA	; 250
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <__TEXT_REGION_LENGTH__+0x700b38>
 506:	90 93 39 0b 	sts	0x0B39, r25	; 0x800b39 <__TEXT_REGION_LENGTH__+0x700b39>
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
 50a:	87 e0       	ldi	r24, 0x07	; 7
 50c:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
		return 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 95       	ret
	} else if (val == added_to_input) {
 514:	81 11       	cpse	r24, r1
 516:	3a c0       	rjmp	.+116    	; 0x58c <open_door+0xa8>
			for(uint8_t i = 0; i < 2; i++){
					red_on;
 518:	e0 e0       	ldi	r30, 0x00	; 0
 51a:	fb e0       	ldi	r31, 0x0B	; 11
 51c:	8a ef       	ldi	r24, 0xFA	; 250
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	82 af       	std	Z+58, r24	; 0x3a
 522:	93 af       	std	Z+59, r25	; 0x3b
					green_on;
 524:	80 af       	std	Z+56, r24	; 0x38
 526:	91 af       	std	Z+57, r25	; 0x39
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	31 ee       	ldi	r19, 0xE1	; 225
 52c:	44 e0       	ldi	r20, 0x04	; 4
 52e:	21 50       	subi	r18, 0x01	; 1
 530:	30 40       	sbci	r19, 0x00	; 0
 532:	40 40       	sbci	r20, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <open_door+0x4a>
 536:	00 c0       	rjmp	.+0      	; 0x538 <open_door+0x54>
 538:	00 00       	nop
					_delay_ms(50);
					red_off;
 53a:	12 ae       	std	Z+58, r1	; 0x3a
 53c:	13 ae       	std	Z+59, r1	; 0x3b
					green_off;
 53e:	10 ae       	std	Z+56, r1	; 0x38
 540:	11 ae       	std	Z+57, r1	; 0x39
 542:	2f ef       	ldi	r18, 0xFF	; 255
 544:	31 ee       	ldi	r19, 0xE1	; 225
 546:	44 e0       	ldi	r20, 0x04	; 4
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	30 40       	sbci	r19, 0x00	; 0
 54c:	40 40       	sbci	r20, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <open_door+0x64>
 550:	00 c0       	rjmp	.+0      	; 0x552 <open_door+0x6e>
 552:	00 00       	nop
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
		return 1;
	} else if (val == added_to_input) {
			for(uint8_t i = 0; i < 2; i++){
					red_on;
 554:	82 af       	std	Z+58, r24	; 0x3a
 556:	93 af       	std	Z+59, r25	; 0x3b
					green_on;
 558:	80 af       	std	Z+56, r24	; 0x38
 55a:	91 af       	std	Z+57, r25	; 0x39
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	91 ee       	ldi	r25, 0xE1	; 225
 560:	24 e0       	ldi	r18, 0x04	; 4
 562:	81 50       	subi	r24, 0x01	; 1
 564:	90 40       	sbci	r25, 0x00	; 0
 566:	20 40       	sbci	r18, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <open_door+0x7e>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <open_door+0x88>
 56c:	00 00       	nop
					_delay_ms(50);
					red_off;
 56e:	12 ae       	std	Z+58, r1	; 0x3a
 570:	13 ae       	std	Z+59, r1	; 0x3b
					green_off;
 572:	10 ae       	std	Z+56, r1	; 0x38
 574:	11 ae       	std	Z+57, r1	; 0x39
 576:	3f ef       	ldi	r19, 0xFF	; 255
 578:	41 ee       	ldi	r20, 0xE1	; 225
 57a:	84 e0       	ldi	r24, 0x04	; 4
 57c:	31 50       	subi	r19, 0x01	; 1
 57e:	40 40       	sbci	r20, 0x00	; 0
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <open_door+0x98>
 584:	00 c0       	rjmp	.+0      	; 0x586 <open_door+0xa2>
 586:	00 00       	nop
		// red led on
		red_on;
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
	}
	return 0;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
					green_off;
					_delay_ms(50);
			}
	} else {
		// red led on
		red_on;
 58c:	8a ef       	ldi	r24, 0xFA	; 250
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <__TEXT_REGION_LENGTH__+0x700b3a>
 594:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <__TEXT_REGION_LENGTH__+0x700b3b>
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
 598:	87 e0       	ldi	r24, 0x07	; 7
 59a:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
	}
	return 0;
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret

000005a2 <init_nrf>:
	}
}

void init_nrf(void)
{
	nrfspiInit();                                        // Initialize SPI
 5a2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <nrfspiInit>
	nrfBegin();                                          // Initialize radio module
 5a6:	0e 94 04 06 	call	0xc08	; 0xc08 <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc,               // Auto Retransmission Delay: 1000 us
 5aa:	68 e0       	ldi	r22, 0x08	; 8
 5ac:	80 e3       	ldi	r24, 0x30	; 48
 5ae:	0e 94 a8 05 	call	0xb50	; 0xb50 <nrfSetRetries>
	NRF_SETUP_ARC_8RETRANSMIT_gc);						 // Auto Retransmission Count: 8 retries
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);             // Power Control: -6 dBm
 5b2:	84 e0       	ldi	r24, 0x04	; 4
 5b4:	0e 94 76 05 	call	0xaec	; 0xaec <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);          // Data Rate: 250 Kbps
 5b8:	80 e2       	ldi	r24, 0x20	; 32
 5ba:	0e 94 84 05 	call	0xb08	; 0xb08 <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);               // CRC Check
 5be:	8c e0       	ldi	r24, 0x0C	; 12
 5c0:	0e 94 9a 05 	call	0xb34	; 0xb34 <nrfSetCRCLength>
	nrfSetChannel(54);                                   // Channel: 54
 5c4:	86 e3       	ldi	r24, 0x36	; 54
 5c6:	0e 94 5e 05 	call	0xabc	; 0xabc <nrfSetChannel>
	nrfSetAutoAck(1);                                    // Auto Acknowledge on
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 6a 05 	call	0xad4	; 0xad4 <nrfSetAutoAck>
	nrfEnableDynamicPayloads();                          // Enable Dynamic Payloads
 5d0:	0e 94 3b 05 	call	0xa76	; 0xa76 <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();                             // Clear interrupt bits
 5d4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <nrfClearInterruptBits>
	nrfFlushRx();                                        // Flush fifo's
 5d8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrfFlushRx>
	nrfFlushTx();
 5dc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrfFlushTx>

	nrfOpenWritingPipe(pipe);                            // Pipe for sending
 5e0:	8b e0       	ldi	r24, 0x0B	; 11
 5e2:	90 e2       	ldi	r25, 0x20	; 32
 5e4:	0e 94 c5 04 	call	0x98a	; 0x98a <nrfOpenWritingPipe>
	nrfOpenReadingPipe(0, pipe);                         // Necessary for acknowledge
 5e8:	6b e0       	ldi	r22, 0x0B	; 11
 5ea:	70 e2       	ldi	r23, 0x20	; 32
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <nrfOpenReadingPipe>
 5f2:	08 95       	ret

000005f4 <main>:
 *          which has a 16 MHz crystal 
 *
 * \return void
 */
void inline init_clock(void) {
  Config32MHzClock_Ext16M();
 5f4:	0e 94 21 01 	call	0x242	; 0x242 <Config32MHzClock_Ext16M>
	// init nrf
	// init keypad
	// init hall effect sensor
	// init sleep mode
	init_clock();
	init_keypad();
 5f8:	0e 94 43 01 	call	0x286	; 0x286 <init_keypad>
	init_LED();
 5fc:	0e 94 a6 01 	call	0x34c	; 0x34c <init_LED>
    init_nrf();
 600:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <init_nrf>
	
	// enable global interrupts
	// enter idle mode
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
 604:	e0 ea       	ldi	r30, 0xA0	; 160
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	82 81       	ldd	r24, Z+2	; 0x02
 60a:	83 60       	ori	r24, 0x03	; 3
 60c:	82 83       	std	Z+2, r24	; 0x02
	sei();
 60e:	78 94       	sei
	
	red_on;
 610:	e0 e0       	ldi	r30, 0x00	; 0
 612:	fb e0       	ldi	r31, 0x0B	; 11
 614:	8a ef       	ldi	r24, 0xFA	; 250
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	82 af       	std	Z+58, r24	; 0x3a
 61a:	93 af       	std	Z+59, r25	; 0x3b
 61c:	2f ef       	ldi	r18, 0xFF	; 255
 61e:	83 ed       	ldi	r24, 0xD3	; 211
 620:	90 e3       	ldi	r25, 0x30	; 48
 622:	21 50       	subi	r18, 0x01	; 1
 624:	80 40       	sbci	r24, 0x00	; 0
 626:	90 40       	sbci	r25, 0x00	; 0
 628:	e1 f7       	brne	.-8      	; 0x622 <main+0x2e>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <main+0x38>
 62c:	00 00       	nop
	_delay_ms(500);
	red_off;
 62e:	12 ae       	std	Z+58, r1	; 0x3a
 630:	13 ae       	std	Z+59, r1	; 0x3b
	
    while (1) 
    {
		switch (state)
 632:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <state>
 636:	88 23       	and	r24, r24
 638:	19 f0       	breq	.+6      	; 0x640 <main+0x4c>
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	39 f0       	breq	.+14     	; 0x64c <main+0x58>
 63e:	0c c0       	rjmp	.+24     	; 0x658 <main+0x64>
		{
			case 0:
				//send over NRF
				nrfWrite(&state, sizeof(uint8_t));
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	8a e0       	ldi	r24, 0x0A	; 10
 644:	90 e2       	ldi	r25, 0x20	; 32
 646:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <nrfWrite>
				break;
 64a:	f3 cf       	rjmp	.-26     	; 0x632 <main+0x3e>
				
			case 1:
				//send over NRF
				nrfWrite(&state, sizeof(uint8_t));
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	90 e2       	ldi	r25, 0x20	; 32
 652:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <nrfWrite>
				break;
 656:	ed cf       	rjmp	.-38     	; 0x632 <main+0x3e>
				
			default:
				state = 1;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <state>
				break;
 65e:	e9 cf       	rjmp	.-46     	; 0x632 <main+0x3e>

00000660 <__vector_104>:
*	<TR><TD> LPO </TD><TD> LP_OUT	</TD><TD> PA1           </TD></TR>	
*	</TABLE>
*/

// ISR for the NRF
ISR(PORTF_INT0_vect){
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
	// nrf what happened
	// react to message
	// go back to idle mode
}
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <__vector_64>:

// ISR for the keypad on port D
ISR(PORTD_INT0_vect){
 674:	1f 92       	push	r1
 676:	0f 92       	push	r0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	0f 92       	push	r0
 67c:	11 24       	eor	r1, r1
 67e:	0b b6       	in	r0, 0x3b	; 59
 680:	0f 92       	push	r0
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	cli();
 69a:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key	= what_key_PD();
 69c:	0e 94 ab 01 	call	0x356	; 0x356 <what_key_PD>
	// add key press to password check
	door = password_check(key);
 6a0:	0e 94 19 02 	call	0x432	; 0x432 <password_check>
	// if password check is filled compare with password
	// correct open door and show green led
	// incorrect show red led. (maybe in a later revision buz a buzzer)
	open_door(door);
 6a4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <open_door>
	// go back to idle mode
	sei();
 6a8:	78 94       	sei
}
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	7f 91       	pop	r23
 6b8:	6f 91       	pop	r22
 6ba:	5f 91       	pop	r21
 6bc:	4f 91       	pop	r20
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0b be       	out	0x3b, r0	; 59
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__vector_43>:

// ISR for the keypad on port E
ISR(PORTE_INT0_vect){
 6d0:	1f 92       	push	r1
 6d2:	0f 92       	push	r0
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	0f 92       	push	r0
 6d8:	11 24       	eor	r1, r1
 6da:	0b b6       	in	r0, 0x3b	; 59
 6dc:	0f 92       	push	r0
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	4f 93       	push	r20
 6e4:	5f 93       	push	r21
 6e6:	6f 93       	push	r22
 6e8:	7f 93       	push	r23
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	af 93       	push	r26
 6f0:	bf 93       	push	r27
 6f2:	ef 93       	push	r30
 6f4:	ff 93       	push	r31
	cli();
 6f6:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key = what_key_PE();
 6f8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <what_key_PE>
	// add key press to password check
	door = password_check(key);
 6fc:	0e 94 19 02 	call	0x432	; 0x432 <password_check>
	
	// see if state changed
	if (open_door(door) == 1) state = 1;
 700:	0e 94 72 02 	call	0x4e4	; 0x4e4 <open_door>
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	11 f4       	brne	.+4      	; 0x70c <__vector_43+0x3c>
 708:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <state>
 
	// go back to idle mode
	sei();
 70c:	78 94       	sei
}
 70e:	ff 91       	pop	r31
 710:	ef 91       	pop	r30
 712:	bf 91       	pop	r27
 714:	af 91       	pop	r26
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	7f 91       	pop	r23
 71c:	6f 91       	pop	r22
 71e:	5f 91       	pop	r21
 720:	4f 91       	pop	r20
 722:	3f 91       	pop	r19
 724:	2f 91       	pop	r18
 726:	0f 90       	pop	r0
 728:	0b be       	out	0x3b, r0	; 59
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <__vector_66>:

// ISR for last person out button
ISR(PORTA_INT0_vect){
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
	// make state 0
	state = 0;
 73e:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <state>
}
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

0000074c <__vector_77>:

ISR(TCD0_OVF_vect){
 74c:	1f 92       	push	r1
 74e:	0f 92       	push	r0
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	0b b6       	in	r0, 0x3b	; 59
 758:	0f 92       	push	r0
 75a:	8f 93       	push	r24
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
	PORTB.OUTCLR = PIN0_bm;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
	red_off;
 766:	e0 e0       	ldi	r30, 0x00	; 0
 768:	fb e0       	ldi	r31, 0x0B	; 11
 76a:	12 ae       	std	Z+58, r1	; 0x3a
 76c:	13 ae       	std	Z+59, r1	; 0x3b
	green_off;
 76e:	10 ae       	std	Z+56, r1	; 0x38
 770:	11 ae       	std	Z+57, r1	; 0x39
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	8f 91       	pop	r24
 778:	0f 90       	pop	r0
 77a:	0b be       	out	0x3b, r0	; 59
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <nrfReadRegister>:
 * \brief   Disbale CRC
 */
void nrfDisableCRC( void )
{
  uint8_t config = nrfReadRegister(REG_CONFIG) & ~NRF_CONFIG_EN_CRC_bm;
  nrfWriteRegister( REG_CONFIG, config );
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	c0 ea       	ldi	r28, 0xA0	; 160
 78e:	d6 e0       	ldi	r29, 0x06	; 6
 790:	10 e2       	ldi	r17, 0x20	; 32
 792:	1e 83       	std	Y+6, r17	; 0x06
 794:	8f 71       	andi	r24, 0x1F	; 31
 796:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 7a0:	1d 83       	std	Y+5, r17	; 0x05
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	08 95       	ret

000007aa <nrfWriteRegisterMulti>:
 7aa:	df 92       	push	r13
 7ac:	ef 92       	push	r14
 7ae:	ff 92       	push	r15
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	7b 01       	movw	r14, r22
 7ba:	c4 2f       	mov	r28, r20
 7bc:	90 e2       	ldi	r25, 0x20	; 32
 7be:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 7c2:	8f 71       	andi	r24, 0x1F	; 31
 7c4:	80 62       	ori	r24, 0x20	; 32
 7c6:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 7ca:	d8 2e       	mov	r13, r24
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	8c 0f       	add	r24, r28
 7d0:	cc 23       	and	r28, r28
 7d2:	69 f0       	breq	.+26     	; 0x7ee <nrfWriteRegisterMulti+0x44>
 7d4:	e7 01       	movw	r28, r14
 7d6:	08 2f       	mov	r16, r24
 7d8:	10 e0       	ldi	r17, 0x00	; 0
 7da:	0f 5f       	subi	r16, 0xFF	; 255
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	0e 0d       	add	r16, r14
 7e0:	1f 1d       	adc	r17, r15
 7e2:	89 91       	ld	r24, Y+
 7e4:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 7e8:	c0 17       	cp	r28, r16
 7ea:	d1 07       	cpc	r29, r17
 7ec:	d1 f7       	brne	.-12     	; 0x7e2 <nrfWriteRegisterMulti+0x38>
 7ee:	80 e2       	ldi	r24, 0x20	; 32
 7f0:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 7f4:	8d 2d       	mov	r24, r13
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	ff 90       	pop	r15
 800:	ef 90       	pop	r14
 802:	df 90       	pop	r13
 804:	08 95       	ret

00000806 <nrfWriteRegister>:
 806:	ff 92       	push	r15
 808:	0f 93       	push	r16
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	f6 2e       	mov	r15, r22
 812:	c0 ea       	ldi	r28, 0xA0	; 160
 814:	d6 e0       	ldi	r29, 0x06	; 6
 816:	10 e2       	ldi	r17, 0x20	; 32
 818:	1e 83       	std	Y+6, r17	; 0x06
 81a:	8f 71       	andi	r24, 0x1F	; 31
 81c:	80 62       	ori	r24, 0x20	; 32
 81e:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 822:	08 2f       	mov	r16, r24
 824:	8f 2d       	mov	r24, r15
 826:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 82a:	1d 83       	std	Y+5, r17	; 0x05
 82c:	80 2f       	mov	r24, r16
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	ff 90       	pop	r15
 838:	08 95       	ret

0000083a <nrfWritePayload>:
 83a:	bf 92       	push	r11
 83c:	cf 92       	push	r12
 83e:	df 92       	push	r13
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	6c 01       	movw	r12, r24
 84e:	84 2f       	mov	r24, r20
 850:	c0 91 11 20 	lds	r28, 0x2011	; 0x802011 <fixed_payload_size>
 854:	1c 2f       	mov	r17, r28
 856:	6c 17       	cp	r22, r28
 858:	08 f4       	brcc	.+2      	; 0x85c <nrfWritePayload+0x22>
 85a:	16 2f       	mov	r17, r22
 85c:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <dynamic_payloads_enabled>
 860:	91 11       	cpse	r25, r1
 862:	25 c0       	rjmp	.+74     	; 0x8ae <nrfWritePayload+0x74>
 864:	0c 2f       	mov	r16, r28
 866:	01 1b       	sub	r16, r17
 868:	90 e2       	ldi	r25, 0x20	; 32
 86a:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 86e:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 872:	b8 2e       	mov	r11, r24
 874:	ee 24       	eor	r14, r14
 876:	ea 94       	dec	r14
 878:	e1 0e       	add	r14, r17
 87a:	11 11       	cpse	r17, r1
 87c:	02 c0       	rjmp	.+4      	; 0x882 <nrfWritePayload+0x48>
 87e:	0e c0       	rjmp	.+28     	; 0x89c <nrfWritePayload+0x62>
 880:	00 e0       	ldi	r16, 0x00	; 0
 882:	e6 01       	movw	r28, r12
 884:	f1 2c       	mov	r15, r1
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	e8 1a       	sub	r14, r24
 88a:	f8 0a       	sbc	r15, r24
 88c:	ec 0c       	add	r14, r12
 88e:	fd 1c       	adc	r15, r13
 890:	89 91       	ld	r24, Y+
 892:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 896:	ec 16       	cp	r14, r28
 898:	fd 06       	cpc	r15, r29
 89a:	d1 f7       	brne	.-12     	; 0x890 <nrfWritePayload+0x56>
 89c:	00 23       	and	r16, r16
 89e:	91 f0       	breq	.+36     	; 0x8c4 <nrfWritePayload+0x8a>
 8a0:	c0 2f       	mov	r28, r16
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 8a8:	c1 50       	subi	r28, 0x01	; 1
 8aa:	d9 f7       	brne	.-10     	; 0x8a2 <nrfWritePayload+0x68>
 8ac:	0b c0       	rjmp	.+22     	; 0x8c4 <nrfWritePayload+0x8a>
 8ae:	90 e2       	ldi	r25, 0x20	; 32
 8b0:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 8b4:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 8b8:	b8 2e       	mov	r11, r24
 8ba:	ee 24       	eor	r14, r14
 8bc:	ea 94       	dec	r14
 8be:	e1 0e       	add	r14, r17
 8c0:	11 11       	cpse	r17, r1
 8c2:	de cf       	rjmp	.-68     	; 0x880 <nrfWritePayload+0x46>
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 8ca:	8b 2d       	mov	r24, r11
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	1f 91       	pop	r17
 8d2:	0f 91       	pop	r16
 8d4:	ff 90       	pop	r15
 8d6:	ef 90       	pop	r14
 8d8:	df 90       	pop	r13
 8da:	cf 90       	pop	r12
 8dc:	bf 90       	pop	r11
 8de:	08 95       	ret

000008e0 <nrfFlushRx>:
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	c0 ea       	ldi	r28, 0xA0	; 160
 8e8:	d6 e0       	ldi	r29, 0x06	; 6
 8ea:	10 e2       	ldi	r17, 0x20	; 32
 8ec:	1e 83       	std	Y+6, r17	; 0x06
 8ee:	82 ee       	ldi	r24, 0xE2	; 226
 8f0:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 8f4:	1d 83       	std	Y+5, r17	; 0x05
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	1f 91       	pop	r17
 8fc:	08 95       	ret

000008fe <nrfFlushTx>:
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	c0 ea       	ldi	r28, 0xA0	; 160
 906:	d6 e0       	ldi	r29, 0x06	; 6
 908:	10 e2       	ldi	r17, 0x20	; 32
 90a:	1e 83       	std	Y+6, r17	; 0x06
 90c:	81 ee       	ldi	r24, 0xE1	; 225
 90e:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 912:	1d 83       	std	Y+5, r17	; 0x05
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	08 95       	ret

0000091c <nrfStartWrite>:
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	ec 01       	movw	r28, r24
 926:	16 2f       	mov	r17, r22
 928:	04 2f       	mov	r16, r20
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 930:	81 fd       	sbrc	r24, 1
 932:	0d c0       	rjmp	.+26     	; 0x94e <nrfStartWrite+0x32>
 934:	68 2f       	mov	r22, r24
 936:	6e 7f       	andi	r22, 0xFE	; 254
 938:	62 60       	ori	r22, 0x02	; 2
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 940:	8f e7       	ldi	r24, 0x7F	; 127
 942:	9e e3       	ldi	r25, 0x3E	; 62
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <nrfStartWrite+0x28>
 948:	00 c0       	rjmp	.+0      	; 0x94a <nrfStartWrite+0x2e>
 94a:	00 00       	nop
 94c:	05 c0       	rjmp	.+10     	; 0x958 <nrfStartWrite+0x3c>
 94e:	68 2f       	mov	r22, r24
 950:	6e 7f       	andi	r22, 0xFE	; 254
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 958:	8f e0       	ldi	r24, 0x0F	; 15
 95a:	94 e0       	ldi	r25, 0x04	; 4
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <nrfStartWrite+0x40>
 960:	00 c0       	rjmp	.+0      	; 0x962 <nrfStartWrite+0x46>
 962:	00 00       	nop
 964:	40 2f       	mov	r20, r16
 966:	61 2f       	mov	r22, r17
 968:	ce 01       	movw	r24, r28
 96a:	0e 94 1d 04 	call	0x83a	; 0x83a <nrfWritePayload>
 96e:	e0 ea       	ldi	r30, 0xA0	; 160
 970:	f6 e0       	ldi	r31, 0x06	; 6
 972:	80 e8       	ldi	r24, 0x80	; 128
 974:	85 83       	std	Z+5, r24	; 0x05
 976:	9a e6       	ldi	r25, 0x6A	; 106
 978:	9a 95       	dec	r25
 97a:	f1 f7       	brne	.-4      	; 0x978 <nrfStartWrite+0x5c>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <nrfStartWrite+0x62>
 97e:	86 83       	std	Z+6, r24	; 0x06
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <nrfOpenWritingPipe>:
 98a:	cf 93       	push	r28
 98c:	df 93       	push	r29
 98e:	ec 01       	movw	r28, r24
 990:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <addr_width>
 994:	bc 01       	movw	r22, r24
 996:	8a e0       	ldi	r24, 0x0A	; 10
 998:	0e 94 d5 03 	call	0x7aa	; 0x7aa <nrfWriteRegisterMulti>
 99c:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <addr_width>
 9a0:	be 01       	movw	r22, r28
 9a2:	80 e1       	ldi	r24, 0x10	; 16
 9a4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <nrfWriteRegisterMulti>
 9a8:	60 91 11 20 	lds	r22, 0x2011	; 0x802011 <fixed_payload_size>
 9ac:	60 32       	cpi	r22, 0x20	; 32
 9ae:	20 f4       	brcc	.+8      	; 0x9b8 <nrfOpenWritingPipe+0x2e>
 9b0:	81 e1       	ldi	r24, 0x11	; 17
 9b2:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <nrfOpenWritingPipe+0x36>
 9b8:	60 e2       	ldi	r22, 0x20	; 32
 9ba:	81 e1       	ldi	r24, 0x11	; 17
 9bc:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	08 95       	ret

000009c6 <nrfOpenReadingPipe>:
 9c6:	0f 93       	push	r16
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	c8 2f       	mov	r28, r24
 9d0:	8b 01       	movw	r16, r22
 9d2:	81 11       	cpse	r24, r1
 9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <nrfOpenReadingPipe+0x20>
 9d6:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <addr_width>
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	8b e2       	ldi	r24, 0x2B	; 43
 9de:	90 e2       	ldi	r25, 0x20	; 32
 9e0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <memcpy>
 9e4:	04 c0       	rjmp	.+8      	; 0x9ee <nrfOpenReadingPipe+0x28>
 9e6:	87 30       	cpi	r24, 0x07	; 7
 9e8:	78 f5       	brcc	.+94     	; 0xa48 <nrfOpenReadingPipe+0x82>
 9ea:	82 30       	cpi	r24, 0x02	; 2
 9ec:	58 f4       	brcc	.+22     	; 0xa04 <nrfOpenReadingPipe+0x3e>
 9ee:	ec 2f       	mov	r30, r28
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	ec 5d       	subi	r30, 0xDC	; 220
 9f4:	ff 4d       	sbci	r31, 0xDF	; 223
 9f6:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <addr_width>
 9fa:	b8 01       	movw	r22, r16
 9fc:	80 81       	ld	r24, Z
 9fe:	0e 94 d5 03 	call	0x7aa	; 0x7aa <nrfWriteRegisterMulti>
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <nrfOpenReadingPipe+0x4e>
 a04:	e8 2f       	mov	r30, r24
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	ec 5d       	subi	r30, 0xDC	; 220
 a0a:	ff 4d       	sbci	r31, 0xDF	; 223
 a0c:	41 e0       	ldi	r20, 0x01	; 1
 a0e:	80 81       	ld	r24, Z
 a10:	0e 94 d5 03 	call	0x7aa	; 0x7aa <nrfWriteRegisterMulti>
 a14:	d0 e0       	ldi	r29, 0x00	; 0
 a16:	fe 01       	movw	r30, r28
 a18:	e2 5e       	subi	r30, 0xE2	; 226
 a1a:	ff 4d       	sbci	r31, 0xDF	; 223
 a1c:	60 91 11 20 	lds	r22, 0x2011	; 0x802011 <fixed_payload_size>
 a20:	80 81       	ld	r24, Z
 a22:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 a2c:	c8 5e       	subi	r28, 0xE8	; 232
 a2e:	df 4d       	sbci	r29, 0xDF	; 223
 a30:	61 e0       	ldi	r22, 0x01	; 1
 a32:	70 e0       	ldi	r23, 0x00	; 0
 a34:	08 80       	ld	r0, Y
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <nrfOpenReadingPipe+0x76>
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	0a 94       	dec	r0
 a3e:	e2 f7       	brpl	.-8      	; 0xa38 <nrfOpenReadingPipe+0x72>
 a40:	68 2b       	or	r22, r24
 a42:	82 e0       	ldi	r24, 0x02	; 2
 a44:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	1f 91       	pop	r17
 a4e:	0f 91       	pop	r16
 a50:	08 95       	ret

00000a52 <nrfToggleFeatures>:
 a52:	1f 93       	push	r17
 a54:	cf 93       	push	r28
 a56:	df 93       	push	r29
 a58:	c0 ea       	ldi	r28, 0xA0	; 160
 a5a:	d6 e0       	ldi	r29, 0x06	; 6
 a5c:	10 e2       	ldi	r17, 0x20	; 32
 a5e:	1e 83       	std	Y+6, r17	; 0x06
 a60:	80 e5       	ldi	r24, 0x50	; 80
 a62:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 a66:	83 e7       	ldi	r24, 0x73	; 115
 a68:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfspiTransfer>
 a6c:	1d 83       	std	Y+5, r17	; 0x05
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	08 95       	ret

00000a76 <nrfEnableDynamicPayloads>:
 a76:	8d e1       	ldi	r24, 0x1D	; 29
 a78:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 a7c:	68 2f       	mov	r22, r24
 a7e:	64 60       	ori	r22, 0x04	; 4
 a80:	8d e1       	ldi	r24, 0x1D	; 29
 a82:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 a86:	8d e1       	ldi	r24, 0x1D	; 29
 a88:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 a8c:	81 11       	cpse	r24, r1
 a8e:	0a c0       	rjmp	.+20     	; 0xaa4 <nrfEnableDynamicPayloads+0x2e>
 a90:	0e 94 29 05 	call	0xa52	; 0xa52 <nrfToggleFeatures>
 a94:	8d e1       	ldi	r24, 0x1D	; 29
 a96:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 a9a:	68 2f       	mov	r22, r24
 a9c:	64 60       	ori	r22, 0x04	; 4
 a9e:	8d e1       	ldi	r24, 0x1D	; 29
 aa0:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 aa4:	8c e1       	ldi	r24, 0x1C	; 28
 aa6:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 aaa:	68 2f       	mov	r22, r24
 aac:	6f 63       	ori	r22, 0x3F	; 63
 aae:	8c e1       	ldi	r24, 0x1C	; 28
 ab0:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <dynamic_payloads_enabled>
 aba:	08 95       	ret

00000abc <nrfSetChannel>:
 abc:	88 23       	and	r24, r24
 abe:	2c f0       	brlt	.+10     	; 0xaca <nrfSetChannel+0xe>
 ac0:	68 2f       	mov	r22, r24
 ac2:	85 e0       	ldi	r24, 0x05	; 5
 ac4:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 ac8:	08 95       	ret
 aca:	6f e7       	ldi	r22, 0x7F	; 127
 acc:	85 e0       	ldi	r24, 0x05	; 5
 ace:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 ad2:	08 95       	ret

00000ad4 <nrfSetAutoAck>:
 ad4:	88 23       	and	r24, r24
 ad6:	29 f0       	breq	.+10     	; 0xae2 <nrfSetAutoAck+0xe>
 ad8:	6f e3       	ldi	r22, 0x3F	; 63
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 ae0:	08 95       	ret
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 aea:	08 95       	ret

00000aec <nrfSetPALevel>:
 aec:	cf 93       	push	r28
 aee:	c8 2f       	mov	r28, r24
 af0:	86 e0       	ldi	r24, 0x06	; 6
 af2:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 af6:	89 7f       	andi	r24, 0xF9	; 249
 af8:	c6 70       	andi	r28, 0x06	; 6
 afa:	68 2f       	mov	r22, r24
 afc:	6c 2b       	or	r22, r28
 afe:	86 e0       	ldi	r24, 0x06	; 6
 b00:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 b04:	cf 91       	pop	r28
 b06:	08 95       	ret

00000b08 <nrfSetDataRate>:
 b08:	cf 93       	push	r28
 b0a:	c8 2f       	mov	r28, r24
 b0c:	86 e0       	ldi	r24, 0x06	; 6
 b0e:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 b12:	87 7d       	andi	r24, 0xD7	; 215
 b14:	9c 2f       	mov	r25, r28
 b16:	98 72       	andi	r25, 0x28	; 40
 b18:	68 2f       	mov	r22, r24
 b1a:	69 2b       	or	r22, r25
 b1c:	86 e0       	ldi	r24, 0x06	; 6
 b1e:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 b22:	86 e0       	ldi	r24, 0x06	; 6
 b24:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 b28:	91 e0       	ldi	r25, 0x01	; 1
 b2a:	c8 13       	cpse	r28, r24
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	89 2f       	mov	r24, r25
 b30:	cf 91       	pop	r28
 b32:	08 95       	ret

00000b34 <nrfSetCRCLength>:
 b34:	cf 93       	push	r28
 b36:	c8 2f       	mov	r28, r24
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 b3e:	83 7f       	andi	r24, 0xF3	; 243
 b40:	cc 70       	andi	r28, 0x0C	; 12
 b42:	68 2f       	mov	r22, r24
 b44:	6c 2b       	or	r22, r28
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 b4c:	cf 91       	pop	r28
 b4e:	08 95       	ret

00000b50 <nrfSetRetries>:
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
 b50:	68 2b       	or	r22, r24
 b52:	84 e0       	ldi	r24, 0x04	; 4
 b54:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 b58:	08 95       	ret

00000b5a <nrfGetMaxTimeout>:
 *
 * @return  maximum timeout in us
 */

uint16_t nrfGetMaxTimeout(void){
  uint8_t retries = nrfReadRegister(REG_SETUP_RETR);
 b5a:	84 e0       	ldi	r24, 0x04	; 4
 b5c:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
  uint8_t delay   = (retries & NRF_SETUP_ARD_gm) >> NRF_SETUP_ARD_gp;
  uint8_t count   = (retries & NRF_SETUP_ARC_gm) >> NRF_SETUP_ARC_gp;

  uint16_t to = 250 * (delay + 1) * (count + 1);

  return to ;
 b60:	28 2f       	mov	r18, r24
 b62:	22 95       	swap	r18
 b64:	2f 70       	andi	r18, 0x0F	; 15
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	2f 5f       	subi	r18, 0xFF	; 255
 b6a:	3f 4f       	sbci	r19, 0xFF	; 255
 b6c:	9a ef       	ldi	r25, 0xFA	; 250
 b6e:	92 9f       	mul	r25, r18
 b70:	a0 01       	movw	r20, r0
 b72:	93 9f       	mul	r25, r19
 b74:	50 0d       	add	r21, r0
 b76:	11 24       	eor	r1, r1
 b78:	8f 70       	andi	r24, 0x0F	; 15
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	01 96       	adiw	r24, 0x01	; 1
}
 b7e:	9c 01       	movw	r18, r24
 b80:	42 9f       	mul	r20, r18
 b82:	c0 01       	movw	r24, r0
 b84:	43 9f       	mul	r20, r19
 b86:	90 0d       	add	r25, r0
 b88:	52 9f       	mul	r21, r18
 b8a:	90 0d       	add	r25, r0
 b8c:	11 24       	eor	r1, r1
 b8e:	08 95       	ret

00000b90 <nrfWaitForAck>:
// from Wouter + nrfGetMaxTimeout()
// TODO?  iAckTimer zou ook een globale waarde kunnen zijn,
//        die bij init bepaald of bij setRetries gezet wordt
//        is nrfFlushRx nodig ??
uint8_t nrfWaitForAck(void)
{
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
 b94:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrfGetMaxTimeout>
 b98:	9c 01       	movw	r18, r24
 b9a:	36 95       	lsr	r19
 b9c:	27 95       	ror	r18
 b9e:	36 95       	lsr	r19
 ba0:	27 95       	ror	r18
 ba2:	ab e7       	ldi	r26, 0x7B	; 123
 ba4:	b4 e1       	ldi	r27, 0x14	; 20
 ba6:	0e 94 55 06 	call	0xcaa	; 0xcaa <__umulhisi3>
 baa:	ec 01       	movw	r28, r24
 bac:	d6 95       	lsr	r29
 bae:	c7 95       	ror	r28
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
 bb0:	20 97       	sbiw	r28, 0x00	; 0
 bb2:	71 f0       	breq	.+28     	; 0xbd0 <nrfWaitForAck+0x40>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
 bb4:	87 e0       	ldi	r24, 0x07	; 7
 bb6:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
    iAckTimer--;
 bba:	21 97       	sbiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bbc:	ef e1       	ldi	r30, 0x1F	; 31
 bbe:	f3 e0       	ldi	r31, 0x03	; 3
 bc0:	31 97       	sbiw	r30, 0x01	; 1
 bc2:	f1 f7       	brne	.-4      	; 0xbc0 <nrfWaitForAck+0x30>
 bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <nrfWaitForAck+0x36>
 bc6:	00 00       	nop
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
 bc8:	80 73       	andi	r24, 0x30	; 48
 bca:	11 f4       	brne	.+4      	; 0xbd0 <nrfWaitForAck+0x40>
 bcc:	20 97       	sbiw	r28, 0x00	; 0
 bce:	91 f7       	brne	.-28     	; 0xbb4 <nrfWaitForAck+0x24>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
    iAckTimer--;
    _delay_us(100);
  }
  iSucces = nrfReadRegister(REG_STATUS) & NRF_STATUS_TX_DS_bm;
 bd0:	87 e0       	ldi	r24, 0x07	; 7
 bd2:	0e 94 c3 03 	call	0x786	; 0x786 <nrfReadRegister>
 bd6:	c8 2f       	mov	r28, r24

  nrfFlushRx();       // ??
 bd8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrfFlushRx>
  nrfFlushTx();       // Flush TX FIFO because of MAX_RT
 bdc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrfFlushTx>
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm|NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
 be0:	60 e7       	ldi	r22, 0x70	; 112
 be2:	87 e0       	ldi	r24, 0x07	; 7
 be4:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>

  return(iSucces);    // Returns 32 on ACK received, 0 on time out
}
 be8:	8c 2f       	mov	r24, r28
 bea:	80 72       	andi	r24, 0x20	; 32
 bec:	df 91       	pop	r29
 bee:	cf 91       	pop	r28
 bf0:	08 95       	ret

00000bf2 <nrfWrite>:
uint8_t nrfWrite( uint8_t* buf, uint8_t len)
{
  uint8_t iReturn;

  //nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD_NO_ACK);
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);
 bf2:	40 ea       	ldi	r20, 0xA0	; 160
 bf4:	0e 94 8e 04 	call	0x91c	; 0x91c <nrfStartWrite>

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out
 bf8:	0e 94 c8 05 	call	0xb90	; 0xb90 <nrfWaitForAck>

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
 bfc:	08 95       	ret

00000bfe <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
 bfe:	60 e7       	ldi	r22, 0x70	; 112
 c00:	87 e0       	ldi	r24, 0x07	; 7
 c02:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
 c06:	08 95       	ret

00000c08 <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c08:	8f e3       	ldi	r24, 0x3F	; 63
 c0a:	9c e9       	ldi	r25, 0x9C	; 156
 c0c:	01 97       	sbiw	r24, 0x01	; 1
 c0e:	f1 f7       	brne	.-4      	; 0xc0c <nrfBegin+0x4>
 c10:	00 c0       	rjmp	.+0      	; 0xc12 <nrfBegin+0xa>
 c12:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
 c14:	6f e5       	ldi	r22, 0x5F	; 95
 c16:	84 e0       	ldi	r24, 0x04	; 4
 c18:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
 c1c:	86 e0       	ldi	r24, 0x06	; 6
 c1e:	0e 94 76 05 	call	0xaec	; 0xaec <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
 c22:	80 e2       	ldi	r24, 0x20	; 32
 c24:	0e 94 84 05 	call	0xb08	; 0xb08 <nrfSetDataRate>
 c28:	88 23       	and	r24, r24
 c2a:	19 f0       	breq	.+6      	; 0xc32 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	0e 94 84 05 	call	0xb08	; 0xb08 <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
 c38:	8c e0       	ldi	r24, 0x0C	; 12
 c3a:	0e 94 9a 05 	call	0xb34	; 0xb34 <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
 c3e:	60 e0       	ldi	r22, 0x00	; 0
 c40:	8c e1       	ldi	r24, 0x1C	; 28
 c42:	0e 94 03 04 	call	0x806	; 0x806 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
 c46:	8c e4       	ldi	r24, 0x4C	; 76
 c48:	0e 94 5e 05 	call	0xabc	; 0xabc <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
 c4c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <nrfClearInterruptBits>
  nrfFlushRx();
 c50:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrfFlushRx>
  nrfFlushTx();
 c54:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrfFlushTx>
 c58:	08 95       	ret

00000c5a <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
 c5a:	e0 e4       	ldi	r30, 0x40	; 64
 c5c:	f6 e0       	ldi	r31, 0x06	; 6
 c5e:	88 e0       	ldi	r24, 0x08	; 8
 c60:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
 c62:	84 e0       	ldi	r24, 0x04	; 4
 c64:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
 c66:	82 e0       	ldi	r24, 0x02	; 2
 c68:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
 c6a:	e0 ea       	ldi	r30, 0xA0	; 160
 c6c:	f6 e0       	ldi	r31, 0x06	; 6
 c6e:	80 e2       	ldi	r24, 0x20	; 32
 c70:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
 c72:	80 e4       	ldi	r24, 0x40	; 64
 c74:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
 c76:	80 e8       	ldi	r24, 0x80	; 128
 c78:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 c7a:	e0 ea       	ldi	r30, 0xA0	; 160
 c7c:	f8 e0       	ldi	r31, 0x08	; 8
 c7e:	88 e1       	ldi	r24, 0x18	; 24
 c80:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
 c82:	80 ec       	ldi	r24, 0xC0	; 192
 c84:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
 c86:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
 c88:	81 e0       	ldi	r24, 0x01	; 1
 c8a:	86 83       	std	Z+6, r24	; 0x06
 c8c:	08 95       	ret

00000c8e <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
 c8e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
 c92:	e0 ea       	ldi	r30, 0xA0	; 160
 c94:	f8 e0       	ldi	r31, 0x08	; 8
 c96:	81 81       	ldd	r24, Z+1	; 0x01
 c98:	86 ff       	sbrs	r24, 6
 c9a:	fd cf       	rjmp	.-6      	; 0xc96 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
 c9c:	e0 ea       	ldi	r30, 0xA0	; 160
 c9e:	f8 e0       	ldi	r31, 0x08	; 8
 ca0:	81 81       	ldd	r24, Z+1	; 0x01
 ca2:	80 64       	ori	r24, 0x40	; 64
 ca4:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
 ca6:	80 81       	ld	r24, Z
}
 ca8:	08 95       	ret

00000caa <__umulhisi3>:
 caa:	a2 9f       	mul	r26, r18
 cac:	b0 01       	movw	r22, r0
 cae:	b3 9f       	mul	r27, r19
 cb0:	c0 01       	movw	r24, r0
 cb2:	a3 9f       	mul	r26, r19
 cb4:	70 0d       	add	r23, r0
 cb6:	81 1d       	adc	r24, r1
 cb8:	11 24       	eor	r1, r1
 cba:	91 1d       	adc	r25, r1
 cbc:	b2 9f       	mul	r27, r18
 cbe:	70 0d       	add	r23, r0
 cc0:	81 1d       	adc	r24, r1
 cc2:	11 24       	eor	r1, r1
 cc4:	91 1d       	adc	r25, r1
 cc6:	08 95       	ret

00000cc8 <memcpy>:
 cc8:	fb 01       	movw	r30, r22
 cca:	dc 01       	movw	r26, r24
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <memcpy+0xa>
 cce:	01 90       	ld	r0, Z+
 cd0:	0d 92       	st	X+, r0
 cd2:	41 50       	subi	r20, 0x01	; 1
 cd4:	50 40       	sbci	r21, 0x00	; 0
 cd6:	d8 f7       	brcc	.-10     	; 0xcce <memcpy+0x6>
 cd8:	08 95       	ret

00000cda <_exit>:
 cda:	f8 94       	cli

00000cdc <__stop_program>:
 cdc:	ff cf       	rjmp	.-2      	; 0xcdc <__stop_program>
