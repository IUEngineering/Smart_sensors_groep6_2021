
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00802000  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802026  00802026  00000b58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007537  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ad8  00000000  00000000  000083bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b6f  00000000  00000000  0000be97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  0000da08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b91  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021b2  00000000  00000000  00011d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00013f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_43>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_64>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_66>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_77>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_104>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ee e9       	ldi	r30, 0x9E	; 158
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 32       	cpi	r26, 0x26	; 38
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a6 e2       	ldi	r26, 0x26	; 38
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ad 32       	cpi	r26, 0x2D	; 45
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <main>
 23a:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |                   // Select frequency range
 242:	e0 e5       	ldi	r30, 0x50	; 80
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	8b ec       	ldi	r24, 0xCB	; 203
 248:	82 83       	std	Z+2, r24	; 0x02
                 OSC_XOSCSEL_XTAL_16KCLK_gc;                // Select start-up time
  OSC.CTRL |= OSC_XOSCEN_bm;                                // Enable oscillator
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );                // Wait for oscillator is ready
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	83 ff       	sbrs	r24, 3
 254:	fd cf       	rjmp	.-6      	; 0x250 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (OSC_PLLFAC_gm & 2);   // Select PLL source and multipl. factor
 256:	e0 e5       	ldi	r30, 0x50	; 80
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	82 ec       	ldi	r24, 0xC2	; 194
 25c:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL |= OSC_PLLEN_bm;                                 // Enable PLL
 25e:	80 81       	ld	r24, Z
 260:	80 61       	ori	r24, 0x10	; 16
 262:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );                 // Wait for PLL is ready
 264:	81 81       	ldd	r24, Z+1	; 0x01
 266:	84 ff       	sbrs	r24, 4
 268:	fd cf       	rjmp	.-6      	; 0x264 <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
 26a:	88 ed       	ldi	r24, 0xD8	; 216
 26c:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
 274:	e0 e5       	ldi	r30, 0x50	; 80
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <init_keypad>:
*/

// this is the password for the keypad!
uint8_t password[password_length] = {1, 1, 1, 1, 1};

void init_keypad(void){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	
	//set pin PA1 as input 
	PORTA.DIRCLR = PIN1_bm;
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d6 e0       	ldi	r29, 0x06	; 6
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	9a 83       	std	Y+2, r25	; 0x02
	
	//set pin PB0 as output
	PORTB.DIRSET = PIN0_bm;
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	40 93 21 06 	sts	0x0621, r20	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	
	//set port D as input
	PORTD.DIRCLR = 0xFF;
 298:	a0 e6       	ldi	r26, 0x60	; 96
 29a:	b6 e0       	ldi	r27, 0x06	; 6
 29c:	3f ef       	ldi	r19, 0xFF	; 255
 29e:	12 96       	adiw	r26, 0x02	; 2
 2a0:	3c 93       	st	X, r19
 2a2:	12 97       	sbiw	r26, 0x02	; 2
	
	//set E0, E1, E2, E3 as inputs
	PORTE.DIRCLR = 0x0F;
 2a4:	e0 e8       	ldi	r30, 0x80	; 128
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	2f e0       	ldi	r18, 0x0F	; 15
 2aa:	22 83       	std	Z+2, r18	; 0x02
	
	//for port A
	//configure input sense on falling edge
	PORTA.PIN1CTRL = PORT_ISC_BOTHEDGES_gc;
 2ac:	19 8a       	std	Y+17, r1	; 0x11
	
	//for port D 
	//use internal pull ups
	//configure input sense on falling edge
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ae:	8a e1       	ldi	r24, 0x1A	; 26
 2b0:	50 96       	adiw	r26, 0x10	; 16
 2b2:	8c 93       	st	X, r24
 2b4:	50 97       	sbiw	r26, 0x10	; 16
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2b6:	51 96       	adiw	r26, 0x11	; 17
 2b8:	8c 93       	st	X, r24
 2ba:	51 97       	sbiw	r26, 0x11	; 17
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2bc:	52 96       	adiw	r26, 0x12	; 18
 2be:	8c 93       	st	X, r24
 2c0:	52 97       	sbiw	r26, 0x12	; 18
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c2:	53 96       	adiw	r26, 0x13	; 19
 2c4:	8c 93       	st	X, r24
 2c6:	53 97       	sbiw	r26, 0x13	; 19
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c8:	54 96       	adiw	r26, 0x14	; 20
 2ca:	8c 93       	st	X, r24
 2cc:	54 97       	sbiw	r26, 0x14	; 20
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ce:	55 96       	adiw	r26, 0x15	; 21
 2d0:	8c 93       	st	X, r24
 2d2:	55 97       	sbiw	r26, 0x15	; 21
	PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2d4:	56 96       	adiw	r26, 0x16	; 22
 2d6:	8c 93       	st	X, r24
 2d8:	56 97       	sbiw	r26, 0x16	; 22
	PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2da:	57 96       	adiw	r26, 0x17	; 23
 2dc:	8c 93       	st	X, r24
 2de:	57 97       	sbiw	r26, 0x17	; 23
	
	//for port E
	//use internal pull ups
	//configure input sense on falling edge
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e0:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e2:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e4:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e6:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e8:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ea:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ec:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ee:	87 8b       	std	Z+23, r24	; 0x17
	
	//configure PA1 interrupt 0
	PORTA.INT0MASK = PIN1_bm;
 2f0:	9a 87       	std	Y+10, r25	; 0x0a
	PORTA.INTCTRL = PORT_INT0LVL_LO_gc;
 2f2:	49 87       	std	Y+9, r20	; 0x09
	
	//configure port D interrupt 0
	PORTD.INT0MASK = 0xFF;
 2f4:	1a 96       	adiw	r26, 0x0a	; 10
 2f6:	3c 93       	st	X, r19
 2f8:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.INTCTRL = PORT_INT0LVL_MED_gc;
 2fa:	19 96       	adiw	r26, 0x09	; 9
 2fc:	9c 93       	st	X, r25
	
	//configure port E interrupt 0
	PORTE.INT0MASK = 0x0F;
 2fe:	22 87       	std	Z+10, r18	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_MED_gc;
 300:	91 87       	std	Z+9, r25	; 0x09
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <init_timer_F0>:

void init_timer_F0(void){
	PORTF.DIRSET = PIN0_bm|PIN1_bm;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	TCF0.PER = 9999;
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	fb e0       	ldi	r31, 0x0B	; 11
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	97 e2       	ldi	r25, 0x27	; 39
 316:	86 a3       	std	Z+38, r24	; 0x26
 318:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.CTRLA = TC_CLKSEL_DIV8_gc;
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	80 83       	st	Z, r24
	TCF0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	81 83       	std	Z+1, r24	; 0x01
	TCF0.CCA = 0;
 322:	10 a6       	std	Z+40, r1	; 0x28
 324:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
 326:	12 a6       	std	Z+42, r1	; 0x2a
 328:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 10;
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	84 a7       	std	Z+44, r24	; 0x2c
 330:	95 a7       	std	Z+45, r25	; 0x2d
 332:	08 95       	ret

00000334 <init_timer_D0>:
}

void init_timer_D0(void){
	TCD0.CTRLA = TC_CLKSEL_OFF_gc;
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f9 e0       	ldi	r31, 0x09	; 9
 338:	10 82       	st	Z, r1
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	86 83       	std	Z+6, r24	; 0x06
	TCD0.CTRLB = TC_WGMODE_SS_gc;
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	81 83       	std	Z+1, r24	; 0x01
	TCD0.PER = 65535;  // 2^16 - 1
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	86 a3       	std	Z+38, r24	; 0x26
 348:	97 a3       	std	Z+39, r25	; 0x27
 34a:	08 95       	ret

0000034c <init_LED>:
}

void init_LED(void){
	init_timer_D0();
 34c:	0e 94 9a 01 	call	0x334	; 0x334 <init_timer_D0>
	init_timer_F0();
 350:	0e 94 84 01 	call	0x308	; 0x308 <init_timer_F0>
 354:	08 95       	ret

00000356 <what_key_PD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e9       	ldi	r24, 0x9F	; 159
 358:	9f e0       	ldi	r25, 0x0F	; 15
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <what_key_PD+0x4>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <what_key_PD+0xa>
 360:	00 00       	nop
}

uint8_t what_key_PD(void){
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
 362:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
	
	switch(in_PD){
 366:	8f 3e       	cpi	r24, 0xEF	; 239
 368:	c9 f0       	breq	.+50     	; 0x39c <what_key_PD+0x46>
 36a:	38 f4       	brcc	.+14     	; 0x37a <what_key_PD+0x24>
 36c:	8f 3b       	cpi	r24, 0xBF	; 191
 36e:	d1 f0       	breq	.+52     	; 0x3a4 <what_key_PD+0x4e>
 370:	8f 3d       	cpi	r24, 0xDF	; 223
 372:	b1 f0       	breq	.+44     	; 0x3a0 <what_key_PD+0x4a>
 374:	8f 37       	cpi	r24, 0x7F	; 127
 376:	d1 f4       	brne	.+52     	; 0x3ac <what_key_PD+0x56>
 378:	17 c0       	rjmp	.+46     	; 0x3a8 <what_key_PD+0x52>
 37a:	8b 3f       	cpi	r24, 0xFB	; 251
 37c:	59 f0       	breq	.+22     	; 0x394 <what_key_PD+0x3e>
 37e:	18 f4       	brcc	.+6      	; 0x386 <what_key_PD+0x30>
 380:	87 3f       	cpi	r24, 0xF7	; 247
 382:	51 f0       	breq	.+20     	; 0x398 <what_key_PD+0x42>
 384:	13 c0       	rjmp	.+38     	; 0x3ac <what_key_PD+0x56>
 386:	8d 3f       	cpi	r24, 0xFD	; 253
 388:	19 f0       	breq	.+6      	; 0x390 <what_key_PD+0x3a>
 38a:	8e 3f       	cpi	r24, 0xFE	; 254
 38c:	89 f0       	breq	.+34     	; 0x3b0 <what_key_PD+0x5a>
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <what_key_PD+0x56>
		case 0xFE:
			return 1;
			break;
			
		case 0xFD:
			return 2;
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	08 95       	ret
			break;
		
		case 0xFB:
			return 3;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	08 95       	ret
			break;
		
		case 0xF7:
			return 4;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	08 95       	ret
			break;
		
		case 0xEF:
			return 5;
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	08 95       	ret
			break;
		
		case 0xDF:
			return 6;
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	08 95       	ret
			break;
		
		case 0xBF:
			return 7;
 3a4:	87 e0       	ldi	r24, 0x07	; 7
 3a6:	08 95       	ret
			break;
		
		case 0x7F:
			return 8;
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	08 95       	ret
			break;
			
		default:
			return fault;
 3ac:	8d e0       	ldi	r24, 0x0D	; 13
 3ae:	08 95       	ret
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
	
	switch(in_PD){
		case 0xFE:
			return 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
			
		default:
			return fault;
			break;
	}
}
 3b2:	08 95       	ret

000003b4 <what_key_PE>:
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <what_key_PE+0x4>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <what_key_PE+0xa>
 3be:	00 00       	nop

uint8_t what_key_PE(void){
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
 3c0:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	
	switch(in_PE){
 3c4:	8b 3f       	cpi	r24, 0xFB	; 251
 3c6:	59 f0       	breq	.+22     	; 0x3de <what_key_PE+0x2a>
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <what_key_PE+0x1c>
 3ca:	87 3f       	cpi	r24, 0xF7	; 247
 3cc:	51 f0       	breq	.+20     	; 0x3e2 <what_key_PE+0x2e>
 3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <what_key_PE+0x32>
 3d0:	8d 3f       	cpi	r24, 0xFD	; 253
 3d2:	19 f0       	breq	.+6      	; 0x3da <what_key_PE+0x26>
 3d4:	8e 3f       	cpi	r24, 0xFE	; 254
 3d6:	49 f0       	breq	.+18     	; 0x3ea <what_key_PE+0x36>
 3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <what_key_PE+0x32>
		case 0xFE: //PE0
		return 9;
		break;
		
		case 0xFD: //PE1
		return 0;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
		break;
		
		case 0xFB: //PE2
		return ok;
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	08 95       	ret
		break;
		
		case 0xF7: //PE3
		return reset;
 3e2:	8b e0       	ldi	r24, 0x0B	; 11
 3e4:	08 95       	ret
		break;
		
		default:
		return fault;
 3e6:	8d e0       	ldi	r24, 0x0D	; 13
 3e8:	08 95       	ret
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
	
	switch(in_PE){
		case 0xFE: //PE0
		return 9;
 3ea:	89 e0       	ldi	r24, 0x09	; 9
		
		default:
		return fault;
		break;
	}
}
 3ec:	08 95       	ret

000003ee <password_check>:

uint8_t password_check(uint8_t key){
 3ee:	98 2f       	mov	r25, r24
	static uint8_t password_compare[password_length] = {0,1,1,1,1};
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
 3f0:	8a 30       	cpi	r24, 0x0A	; 10
 3f2:	b9 f4       	brne	.+46     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
 3f4:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <password>
 3f8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 3fc:	98 13       	cpse	r25, r24
 3fe:	48 c0       	rjmp	.+144    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 400:	e6 e0       	ldi	r30, 0x06	; 6
 402:	f0 e2       	ldi	r31, 0x20	; 32
 404:	a1 e0       	ldi	r26, 0x01	; 1
 406:	b0 e2       	ldi	r27, 0x20	; 32
 408:	2a e0       	ldi	r18, 0x0A	; 10
 40a:	30 e2       	ldi	r19, 0x20	; 32
 40c:	91 91       	ld	r25, Z+
 40e:	8d 91       	ld	r24, X+
 410:	98 13       	cpse	r25, r24
 412:	40 c0       	rjmp	.+128    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	static uint8_t n;
	
	// check the password if the ok key is pressed
	if (key == ok){
		
		for (uint8_t i = 0; i < password_length; i++)
 414:	e2 17       	cp	r30, r18
 416:	f3 07       	cpc	r31, r19
 418:	c9 f7       	brne	.-14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			{
				return wrong_password;
			}
		}
		
		n = 0;
 41a:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <__data_end>
		return correct_password;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	08 95       	ret
	}
	
	// reset the password if the reset key is pressed
	if (key == reset)
 422:	8b 30       	cpi	r24, 0x0B	; 11
 424:	21 f4       	brne	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		n = 0;
 426:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <__data_end>
		return added_to_input;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
	}
	
	if (n == password_length)
 42e:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <__data_end>
 432:	85 30       	cpi	r24, 0x05	; 5
 434:	19 f5       	brne	.+70     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		n = 0;
 436:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <__data_end>
		for (uint8_t i = 0; i < 5; i++)
		{
			red_on;
 43a:	e0 e0       	ldi	r30, 0x00	; 0
 43c:	fb e0       	ldi	r31, 0x0B	; 11
 43e:	2a ef       	ldi	r18, 0xFA	; 250
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	22 af       	std	Z+58, r18	; 0x3a
 444:	33 af       	std	Z+59, r19	; 0x3b
			green_on;
 446:	20 af       	std	Z+56, r18	; 0x38
 448:	31 af       	std	Z+57, r19	; 0x39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44a:	4f ef       	ldi	r20, 0xFF	; 255
 44c:	57 e8       	ldi	r21, 0x87	; 135
 44e:	93 e1       	ldi	r25, 0x13	; 19
 450:	41 50       	subi	r20, 0x01	; 1
 452:	50 40       	sbci	r21, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
			_delay_ms(200);
			red_off;
 45c:	12 ae       	std	Z+58, r1	; 0x3a
 45e:	13 ae       	std	Z+59, r1	; 0x3b
			green_off;
 460:	10 ae       	std	Z+56, r1	; 0x38
 462:	11 ae       	std	Z+57, r1	; 0x39
 464:	4f ef       	ldi	r20, 0xFF	; 255
 466:	53 ec       	ldi	r21, 0xC3	; 195
 468:	99 e0       	ldi	r25, 0x09	; 9
 46a:	41 50       	subi	r20, 0x01	; 1
 46c:	50 40       	sbci	r21, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	81 50       	subi	r24, 0x01	; 1
	}
	
	if (n == password_length)
	{
		n = 0;
		for (uint8_t i = 0; i < 5; i++)
 478:	21 f7       	brne	.-56     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 47a:	08 95       	ret
		}
		return added_to_input;
	}
	
	// add number in password checker
	password_compare[n] = key;
 47c:	e8 2f       	mov	r30, r24
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	e0 50       	subi	r30, 0x00	; 0
 482:	f0 4e       	sbci	r31, 0xE0	; 224
 484:	90 83       	st	Z, r25
	n++;
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <__data_end>
	return added_to_input;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	08 95       	ret
		
		for (uint8_t i = 0; i < password_length; i++)
		{
			if (!(password[i] == password_compare[i])) 
			{
				return wrong_password;
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	08 95       	ret
 494:	82 e0       	ldi	r24, 0x02	; 2
	
	// add number in password checker
	password_compare[n] = key;
	n++;
	return added_to_input;
}
 496:	08 95       	ret

00000498 <open_door>:

void open_door(uint8_t val){
	if (val == correct_password) {
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	a9 f4       	brne	.+42     	; 0x4c6 <open_door+0x2e>
		// unlock door
		PORTB.OUTSET = PIN0_bm;
 49c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
 4a0:	2f ef       	ldi	r18, 0xFF	; 255
 4a2:	33 ec       	ldi	r19, 0xC3	; 195
 4a4:	49 e0       	ldi	r20, 0x09	; 9
 4a6:	21 50       	subi	r18, 0x01	; 1
 4a8:	30 40       	sbci	r19, 0x00	; 0
 4aa:	40 40       	sbci	r20, 0x00	; 0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <open_door+0xe>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <open_door+0x18>
 4b0:	00 00       	nop
		// green led on
		_delay_ms(100);
		green_on;
 4b2:	8a ef       	ldi	r24, 0xFA	; 250
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <__TEXT_REGION_LENGTH__+0x700b38>
 4ba:	90 93 39 0b 	sts	0x0B39, r25	; 0x800b39 <__TEXT_REGION_LENGTH__+0x700b39>
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
 4be:	87 e0       	ldi	r24, 0x07	; 7
 4c0:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
 4c4:	08 95       	ret
		
	} else if (val == added_to_input) {
 4c6:	81 11       	cpse	r24, r1
 4c8:	39 c0       	rjmp	.+114    	; 0x53c <open_door+0xa4>
			for(uint8_t i = 0; i < 2; i++){
					red_on;
 4ca:	e0 e0       	ldi	r30, 0x00	; 0
 4cc:	fb e0       	ldi	r31, 0x0B	; 11
 4ce:	8a ef       	ldi	r24, 0xFA	; 250
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	82 af       	std	Z+58, r24	; 0x3a
 4d4:	93 af       	std	Z+59, r25	; 0x3b
					green_on;
 4d6:	80 af       	std	Z+56, r24	; 0x38
 4d8:	91 af       	std	Z+57, r25	; 0x39
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	31 ee       	ldi	r19, 0xE1	; 225
 4de:	44 e0       	ldi	r20, 0x04	; 4
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	30 40       	sbci	r19, 0x00	; 0
 4e4:	40 40       	sbci	r20, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <open_door+0x48>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <open_door+0x52>
 4ea:	00 00       	nop
					_delay_ms(50);
					red_off;
 4ec:	12 ae       	std	Z+58, r1	; 0x3a
 4ee:	13 ae       	std	Z+59, r1	; 0x3b
					green_off;
 4f0:	10 ae       	std	Z+56, r1	; 0x38
 4f2:	11 ae       	std	Z+57, r1	; 0x39
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	31 ee       	ldi	r19, 0xE1	; 225
 4f8:	44 e0       	ldi	r20, 0x04	; 4
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	30 40       	sbci	r19, 0x00	; 0
 4fe:	40 40       	sbci	r20, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <open_door+0x62>
 502:	00 c0       	rjmp	.+0      	; 0x504 <open_door+0x6c>
 504:	00 00       	nop
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
		
	} else if (val == added_to_input) {
			for(uint8_t i = 0; i < 2; i++){
					red_on;
 506:	82 af       	std	Z+58, r24	; 0x3a
 508:	93 af       	std	Z+59, r25	; 0x3b
					green_on;
 50a:	80 af       	std	Z+56, r24	; 0x38
 50c:	91 af       	std	Z+57, r25	; 0x39
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	91 ee       	ldi	r25, 0xE1	; 225
 512:	24 e0       	ldi	r18, 0x04	; 4
 514:	81 50       	subi	r24, 0x01	; 1
 516:	90 40       	sbci	r25, 0x00	; 0
 518:	20 40       	sbci	r18, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <open_door+0x7c>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <open_door+0x86>
 51e:	00 00       	nop
					_delay_ms(50);
					red_off;
 520:	12 ae       	std	Z+58, r1	; 0x3a
 522:	13 ae       	std	Z+59, r1	; 0x3b
					green_off;
 524:	10 ae       	std	Z+56, r1	; 0x38
 526:	11 ae       	std	Z+57, r1	; 0x39
 528:	3f ef       	ldi	r19, 0xFF	; 255
 52a:	41 ee       	ldi	r20, 0xE1	; 225
 52c:	84 e0       	ldi	r24, 0x04	; 4
 52e:	31 50       	subi	r19, 0x01	; 1
 530:	40 40       	sbci	r20, 0x00	; 0
 532:	80 40       	sbci	r24, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <open_door+0x96>
 536:	00 c0       	rjmp	.+0      	; 0x538 <open_door+0xa0>
 538:	00 00       	nop
 53a:	08 95       	ret
					_delay_ms(50);
			}
	} else {
		// red led on
		red_on;
 53c:	8a ef       	ldi	r24, 0xFA	; 250
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <__TEXT_REGION_LENGTH__+0x700b3a>
 544:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <__TEXT_REGION_LENGTH__+0x700b3b>
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
 548:	87 e0       	ldi	r24, 0x07	; 7
 54a:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
 54e:	08 95       	ret

00000550 <init_nrf>:
	}
}

void init_nrf(void)
{
	nrfspiInit();                                        // Initialize SPI
 550:	0e 94 1c 05 	call	0xa38	; 0xa38 <nrfspiInit>
	nrfBegin();                                          // Initialize radio module
 554:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc,               // Auto Retransmission Delay: 1000 us
 558:	68 e0       	ldi	r22, 0x08	; 8
 55a:	80 e3       	ldi	r24, 0x30	; 48
 55c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <nrfSetRetries>
	NRF_SETUP_ARC_8RETRANSMIT_gc);						 // Auto Retransmission Count: 8 retries
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);             // Power Control: -6 dBm
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	0e 94 b7 04 	call	0x96e	; 0x96e <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);          // Data Rate: 250 Kbps
 566:	80 e2       	ldi	r24, 0x20	; 32
 568:	0e 94 c5 04 	call	0x98a	; 0x98a <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);               // CRC Check
 56c:	8c e0       	ldi	r24, 0x0C	; 12
 56e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <nrfSetCRCLength>
	nrfSetChannel(54);                                   // Channel: 54
 572:	86 e3       	ldi	r24, 0x36	; 54
 574:	0e 94 9f 04 	call	0x93e	; 0x93e <nrfSetChannel>
	nrfSetAutoAck(1);                                    // Auto Acknowledge on
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 ab 04 	call	0x956	; 0x956 <nrfSetAutoAck>
	nrfEnableDynamicPayloads();                          // Enable Dynamic Payloads
 57e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();                             // Clear interrupt bits
 582:	0e 94 ee 04 	call	0x9dc	; 0x9dc <nrfClearInterruptBits>
	nrfFlushRx();                                        // Flush fifo's
 586:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfFlushRx>
	nrfFlushTx();
 58a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <nrfFlushTx>

	nrfOpenWritingPipe(pipe);                            // Pipe for sending
 58e:	8c e0       	ldi	r24, 0x0C	; 12
 590:	90 e2       	ldi	r25, 0x20	; 32
 592:	0e 94 06 04 	call	0x80c	; 0x80c <nrfOpenWritingPipe>
	nrfOpenReadingPipe(0, pipe);                         // Necessary for acknowledge
 596:	6c e0       	ldi	r22, 0x0C	; 12
 598:	70 e2       	ldi	r23, 0x20	; 32
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 24 04 	call	0x848	; 0x848 <nrfOpenReadingPipe>
 5a0:	08 95       	ret

000005a2 <main>:
 *          which has a 16 MHz crystal 
 *
 * \return void
 */
void inline init_clock(void) {
  Config32MHzClock_Ext16M();
 5a2:	0e 94 21 01 	call	0x242	; 0x242 <Config32MHzClock_Ext16M>
	// init nrf
	// init keypad
	// init hall effect sensor
	// init sleep mode
	init_clock();
	init_keypad();
 5a6:	0e 94 43 01 	call	0x286	; 0x286 <init_keypad>
	init_LED();
 5aa:	0e 94 a6 01 	call	0x34c	; 0x34c <init_LED>
    init_nrf();
 5ae:	0e 94 a8 02 	call	0x550	; 0x550 <init_nrf>
	
	// enable global interrupts
	// enter idle mode
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
 5b2:	e0 ea       	ldi	r30, 0xA0	; 160
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	83 60       	ori	r24, 0x03	; 3
 5ba:	82 83       	std	Z+2, r24	; 0x02
	sei();
 5bc:	78 94       	sei
	
	red_on;
 5be:	e0 e0       	ldi	r30, 0x00	; 0
 5c0:	fb e0       	ldi	r31, 0x0B	; 11
 5c2:	8a ef       	ldi	r24, 0xFA	; 250
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	82 af       	std	Z+58, r24	; 0x3a
 5c8:	93 af       	std	Z+59, r25	; 0x3b
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
 5cc:	83 ed       	ldi	r24, 0xD3	; 211
 5ce:	90 e3       	ldi	r25, 0x30	; 48
 5d0:	21 50       	subi	r18, 0x01	; 1
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x2e>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x38>
 5da:	00 00       	nop
	_delay_ms(500);
	red_off;
 5dc:	12 ae       	std	Z+58, r1	; 0x3a
 5de:	13 ae       	std	Z+59, r1	; 0x3b
 5e0:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <state>
 5e4:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <state+0x1>
			case 1:
				//send over NRF
				//enter idle mode
				break;
			default:
				state = 1;
 5e8:	31 e0       	ldi	r19, 0x01	; 1
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <main+0x50>
 5ee:	83 2f       	mov	r24, r19
 5f0:	92 2f       	mov	r25, r18
	_delay_ms(500);
	red_off;
	
    while (1) 
    {
		switch (state)
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	91 05       	cpc	r25, r1
 5f6:	e8 f3       	brcs	.-6      	; 0x5f2 <main+0x50>
 5f8:	fa cf       	rjmp	.-12     	; 0x5ee <main+0x4c>

000005fa <__vector_104>:
*	<TR><TD> LPO </TD><TD> LP_OUT	</TD><TD> PA1           </TD></TR>	
*	</TABLE>
*/

// ISR for the NRF
ISR(PORTF_INT0_vect){
 5fa:	1f 92       	push	r1
 5fc:	0f 92       	push	r0
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
	// nrf what happened
	// react to message
	// go back to idle mode
}
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_64>:

// ISR for the keypad on port D
ISR(PORTD_INT0_vect){
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	0b b6       	in	r0, 0x3b	; 59
 61a:	0f 92       	push	r0
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
	cli();
 634:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key	= what_key_PD();
 636:	0e 94 ab 01 	call	0x356	; 0x356 <what_key_PD>
	// add key press to password check
	door = password_check(key);
 63a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <password_check>
	// if password check is filled compare with password
	// correct open door and show green led
	// incorrect show red led. (maybe in a later revision buz a buzzer)
	open_door(door);
 63e:	0e 94 4c 02 	call	0x498	; 0x498 <open_door>
	// go back to idle mode
	sei();
 642:	78 94       	sei
}
 644:	ff 91       	pop	r31
 646:	ef 91       	pop	r30
 648:	bf 91       	pop	r27
 64a:	af 91       	pop	r26
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	7f 91       	pop	r23
 652:	6f 91       	pop	r22
 654:	5f 91       	pop	r21
 656:	4f 91       	pop	r20
 658:	3f 91       	pop	r19
 65a:	2f 91       	pop	r18
 65c:	0f 90       	pop	r0
 65e:	0b be       	out	0x3b, r0	; 59
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <__vector_43>:

// ISR for the keypad on port E
ISR(PORTE_INT0_vect){
 66a:	1f 92       	push	r1
 66c:	0f 92       	push	r0
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	0f 92       	push	r0
 672:	11 24       	eor	r1, r1
 674:	0b b6       	in	r0, 0x3b	; 59
 676:	0f 92       	push	r0
 678:	2f 93       	push	r18
 67a:	3f 93       	push	r19
 67c:	4f 93       	push	r20
 67e:	5f 93       	push	r21
 680:	6f 93       	push	r22
 682:	7f 93       	push	r23
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	af 93       	push	r26
 68a:	bf 93       	push	r27
 68c:	ef 93       	push	r30
 68e:	ff 93       	push	r31
	cli();
 690:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key = what_key_PE();
 692:	0e 94 da 01 	call	0x3b4	; 0x3b4 <what_key_PE>
	// add key press to password check
	door = password_check(key);
 696:	0e 94 f7 01 	call	0x3ee	; 0x3ee <password_check>
	// if password check is filled compare with password
	// correct open door and show green led
	// incorrect show red led. (maybe in a later revision buz a buzzer)
	// go back to idle
	open_door(door);
 69a:	0e 94 4c 02 	call	0x498	; 0x498 <open_door>
	// go back to idle mode
	sei();
 69e:	78 94       	sei
}
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	0f 90       	pop	r0
 6ba:	0b be       	out	0x3b, r0	; 59
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <__vector_66>:

// ISR for last person out button
ISR(PORTA_INT0_vect){
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
	// make state 0
	state = 0;
 6d0:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <state>
 6d4:	10 92 0b 20 	sts	0x200B, r1	; 0x80200b <state+0x1>
}
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__vector_77>:

ISR(TCD0_OVF_vect){
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	0b b6       	in	r0, 0x3b	; 59
 6ee:	0f 92       	push	r0
 6f0:	8f 93       	push	r24
 6f2:	ef 93       	push	r30
 6f4:	ff 93       	push	r31
	PORTB.OUTCLR = PIN0_bm;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
	red_off;
 6fc:	e0 e0       	ldi	r30, 0x00	; 0
 6fe:	fb e0       	ldi	r31, 0x0B	; 11
 700:	12 ae       	std	Z+58, r1	; 0x3a
 702:	13 ae       	std	Z+59, r1	; 0x3b
	green_off;
 704:	10 ae       	std	Z+56, r1	; 0x38
 706:	11 ae       	std	Z+57, r1	; 0x39
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	8f 91       	pop	r24
 70e:	0f 90       	pop	r0
 710:	0b be       	out	0x3b, r0	; 59
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
 71c:	1f 93       	push	r17
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	c0 ea       	ldi	r28, 0xA0	; 160
 724:	d6 e0       	ldi	r29, 0x06	; 6
 726:	10 e2       	ldi	r17, 0x20	; 32
 728:	1e 83       	std	Y+6, r17	; 0x06
 72a:	8f 71       	andi	r24, 0x1F	; 31
 72c:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 736:	1d 83       	std	Y+5, r17	; 0x05
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	08 95       	ret

00000740 <nrfWriteRegisterMulti>:
 740:	df 92       	push	r13
 742:	ef 92       	push	r14
 744:	ff 92       	push	r15
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	7b 01       	movw	r14, r22
 750:	c4 2f       	mov	r28, r20
 752:	90 e2       	ldi	r25, 0x20	; 32
 754:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 758:	8f 71       	andi	r24, 0x1F	; 31
 75a:	80 62       	ori	r24, 0x20	; 32
 75c:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 760:	d8 2e       	mov	r13, r24
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	8c 0f       	add	r24, r28
 766:	cc 23       	and	r28, r28
 768:	69 f0       	breq	.+26     	; 0x784 <nrfWriteRegisterMulti+0x44>
 76a:	e7 01       	movw	r28, r14
 76c:	08 2f       	mov	r16, r24
 76e:	10 e0       	ldi	r17, 0x00	; 0
 770:	0f 5f       	subi	r16, 0xFF	; 255
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	0e 0d       	add	r16, r14
 776:	1f 1d       	adc	r17, r15
 778:	89 91       	ld	r24, Y+
 77a:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 77e:	c0 17       	cp	r28, r16
 780:	d1 07       	cpc	r29, r17
 782:	d1 f7       	brne	.-12     	; 0x778 <nrfWriteRegisterMulti+0x38>
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 78a:	8d 2d       	mov	r24, r13
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	08 95       	ret

0000079c <nrfWriteRegister>:
 79c:	ff 92       	push	r15
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	f6 2e       	mov	r15, r22
 7a8:	c0 ea       	ldi	r28, 0xA0	; 160
 7aa:	d6 e0       	ldi	r29, 0x06	; 6
 7ac:	10 e2       	ldi	r17, 0x20	; 32
 7ae:	1e 83       	std	Y+6, r17	; 0x06
 7b0:	8f 71       	andi	r24, 0x1F	; 31
 7b2:	80 62       	ori	r24, 0x20	; 32
 7b4:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 7b8:	08 2f       	mov	r16, r24
 7ba:	8f 2d       	mov	r24, r15
 7bc:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 7c0:	1d 83       	std	Y+5, r17	; 0x05
 7c2:	80 2f       	mov	r24, r16
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	1f 91       	pop	r17
 7ca:	0f 91       	pop	r16
 7cc:	ff 90       	pop	r15
 7ce:	08 95       	ret

000007d0 <nrfFlushRx>:
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	c0 ea       	ldi	r28, 0xA0	; 160
 7d8:	d6 e0       	ldi	r29, 0x06	; 6
 7da:	10 e2       	ldi	r17, 0x20	; 32
 7dc:	1e 83       	std	Y+6, r17	; 0x06
 7de:	82 ee       	ldi	r24, 0xE2	; 226
 7e0:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 7e4:	1d 83       	std	Y+5, r17	; 0x05
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	08 95       	ret

000007ee <nrfFlushTx>:
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	c0 ea       	ldi	r28, 0xA0	; 160
 7f6:	d6 e0       	ldi	r29, 0x06	; 6
 7f8:	10 e2       	ldi	r17, 0x20	; 32
 7fa:	1e 83       	std	Y+6, r17	; 0x06
 7fc:	81 ee       	ldi	r24, 0xE1	; 225
 7fe:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 802:	1d 83       	std	Y+5, r17	; 0x05
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
 80a:	08 95       	ret

0000080c <nrfOpenWritingPipe>:
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	ec 01       	movw	r28, r24
 812:	40 91 11 20 	lds	r20, 0x2011	; 0x802011 <addr_width>
 816:	bc 01       	movw	r22, r24
 818:	8a e0       	ldi	r24, 0x0A	; 10
 81a:	0e 94 a0 03 	call	0x740	; 0x740 <nrfWriteRegisterMulti>
 81e:	40 91 11 20 	lds	r20, 0x2011	; 0x802011 <addr_width>
 822:	be 01       	movw	r22, r28
 824:	80 e1       	ldi	r24, 0x10	; 16
 826:	0e 94 a0 03 	call	0x740	; 0x740 <nrfWriteRegisterMulti>
 82a:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <fixed_payload_size>
 82e:	60 32       	cpi	r22, 0x20	; 32
 830:	20 f4       	brcc	.+8      	; 0x83a <nrfOpenWritingPipe+0x2e>
 832:	81 e1       	ldi	r24, 0x11	; 17
 834:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 838:	04 c0       	rjmp	.+8      	; 0x842 <nrfOpenWritingPipe+0x36>
 83a:	60 e2       	ldi	r22, 0x20	; 32
 83c:	81 e1       	ldi	r24, 0x11	; 17
 83e:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	08 95       	ret

00000848 <nrfOpenReadingPipe>:
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	c8 2f       	mov	r28, r24
 852:	8b 01       	movw	r16, r22
 854:	81 11       	cpse	r24, r1
 856:	08 c0       	rjmp	.+16     	; 0x868 <nrfOpenReadingPipe+0x20>
 858:	40 91 11 20 	lds	r20, 0x2011	; 0x802011 <addr_width>
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	87 e2       	ldi	r24, 0x27	; 39
 860:	90 e2       	ldi	r25, 0x20	; 32
 862:	0e 94 44 05 	call	0xa88	; 0xa88 <memcpy>
 866:	04 c0       	rjmp	.+8      	; 0x870 <nrfOpenReadingPipe+0x28>
 868:	87 30       	cpi	r24, 0x07	; 7
 86a:	78 f5       	brcc	.+94     	; 0x8ca <nrfOpenReadingPipe+0x82>
 86c:	82 30       	cpi	r24, 0x02	; 2
 86e:	58 f4       	brcc	.+22     	; 0x886 <nrfOpenReadingPipe+0x3e>
 870:	ec 2f       	mov	r30, r28
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	e0 5e       	subi	r30, 0xE0	; 224
 876:	ff 4d       	sbci	r31, 0xDF	; 223
 878:	40 91 11 20 	lds	r20, 0x2011	; 0x802011 <addr_width>
 87c:	b8 01       	movw	r22, r16
 87e:	80 81       	ld	r24, Z
 880:	0e 94 a0 03 	call	0x740	; 0x740 <nrfWriteRegisterMulti>
 884:	08 c0       	rjmp	.+16     	; 0x896 <nrfOpenReadingPipe+0x4e>
 886:	e8 2f       	mov	r30, r24
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	e0 5e       	subi	r30, 0xE0	; 224
 88c:	ff 4d       	sbci	r31, 0xDF	; 223
 88e:	41 e0       	ldi	r20, 0x01	; 1
 890:	80 81       	ld	r24, Z
 892:	0e 94 a0 03 	call	0x740	; 0x740 <nrfWriteRegisterMulti>
 896:	d0 e0       	ldi	r29, 0x00	; 0
 898:	fe 01       	movw	r30, r28
 89a:	e6 5e       	subi	r30, 0xE6	; 230
 89c:	ff 4d       	sbci	r31, 0xDF	; 223
 89e:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <fixed_payload_size>
 8a2:	80 81       	ld	r24, Z
 8a4:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 8a8:	82 e0       	ldi	r24, 0x02	; 2
 8aa:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 8ae:	cc 5e       	subi	r28, 0xEC	; 236
 8b0:	df 4d       	sbci	r29, 0xDF	; 223
 8b2:	61 e0       	ldi	r22, 0x01	; 1
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	08 80       	ld	r0, Y
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <nrfOpenReadingPipe+0x76>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	0a 94       	dec	r0
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <nrfOpenReadingPipe+0x72>
 8c2:	68 2b       	or	r22, r24
 8c4:	82 e0       	ldi	r24, 0x02	; 2
 8c6:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	1f 91       	pop	r17
 8d0:	0f 91       	pop	r16
 8d2:	08 95       	ret

000008d4 <nrfToggleFeatures>:
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	c0 ea       	ldi	r28, 0xA0	; 160
 8dc:	d6 e0       	ldi	r29, 0x06	; 6
 8de:	10 e2       	ldi	r17, 0x20	; 32
 8e0:	1e 83       	std	Y+6, r17	; 0x06
 8e2:	80 e5       	ldi	r24, 0x50	; 80
 8e4:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 8e8:	83 e7       	ldi	r24, 0x73	; 115
 8ea:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrfspiTransfer>
 8ee:	1d 83       	std	Y+5, r17	; 0x05
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	1f 91       	pop	r17
 8f6:	08 95       	ret

000008f8 <nrfEnableDynamicPayloads>:
 8f8:	8d e1       	ldi	r24, 0x1D	; 29
 8fa:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 8fe:	68 2f       	mov	r22, r24
 900:	64 60       	ori	r22, 0x04	; 4
 902:	8d e1       	ldi	r24, 0x1D	; 29
 904:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 908:	8d e1       	ldi	r24, 0x1D	; 29
 90a:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 90e:	81 11       	cpse	r24, r1
 910:	0a c0       	rjmp	.+20     	; 0x926 <nrfEnableDynamicPayloads+0x2e>
 912:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <nrfToggleFeatures>
 916:	8d e1       	ldi	r24, 0x1D	; 29
 918:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 91c:	68 2f       	mov	r22, r24
 91e:	64 60       	ori	r22, 0x04	; 4
 920:	8d e1       	ldi	r24, 0x1D	; 29
 922:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 926:	8c e1       	ldi	r24, 0x1C	; 28
 928:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 92c:	68 2f       	mov	r22, r24
 92e:	6f 63       	ori	r22, 0x3F	; 63
 930:	8c e1       	ldi	r24, 0x1C	; 28
 932:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <dynamic_payloads_enabled>
 93c:	08 95       	ret

0000093e <nrfSetChannel>:
 93e:	88 23       	and	r24, r24
 940:	2c f0       	brlt	.+10     	; 0x94c <nrfSetChannel+0xe>
 942:	68 2f       	mov	r22, r24
 944:	85 e0       	ldi	r24, 0x05	; 5
 946:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 94a:	08 95       	ret
 94c:	6f e7       	ldi	r22, 0x7F	; 127
 94e:	85 e0       	ldi	r24, 0x05	; 5
 950:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 954:	08 95       	ret

00000956 <nrfSetAutoAck>:
 956:	88 23       	and	r24, r24
 958:	29 f0       	breq	.+10     	; 0x964 <nrfSetAutoAck+0xe>
 95a:	6f e3       	ldi	r22, 0x3F	; 63
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 962:	08 95       	ret
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 96c:	08 95       	ret

0000096e <nrfSetPALevel>:
 96e:	cf 93       	push	r28
 970:	c8 2f       	mov	r28, r24
 972:	86 e0       	ldi	r24, 0x06	; 6
 974:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 978:	89 7f       	andi	r24, 0xF9	; 249
 97a:	c6 70       	andi	r28, 0x06	; 6
 97c:	68 2f       	mov	r22, r24
 97e:	6c 2b       	or	r22, r28
 980:	86 e0       	ldi	r24, 0x06	; 6
 982:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 986:	cf 91       	pop	r28
 988:	08 95       	ret

0000098a <nrfSetDataRate>:
 98a:	cf 93       	push	r28
 98c:	c8 2f       	mov	r28, r24
 98e:	86 e0       	ldi	r24, 0x06	; 6
 990:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 994:	87 7d       	andi	r24, 0xD7	; 215
 996:	9c 2f       	mov	r25, r28
 998:	98 72       	andi	r25, 0x28	; 40
 99a:	68 2f       	mov	r22, r24
 99c:	69 2b       	or	r22, r25
 99e:	86 e0       	ldi	r24, 0x06	; 6
 9a0:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 9a4:	86 e0       	ldi	r24, 0x06	; 6
 9a6:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 9aa:	91 e0       	ldi	r25, 0x01	; 1
 9ac:	c8 13       	cpse	r28, r24
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	89 2f       	mov	r24, r25
 9b2:	cf 91       	pop	r28
 9b4:	08 95       	ret

000009b6 <nrfSetCRCLength>:
 9b6:	cf 93       	push	r28
 9b8:	c8 2f       	mov	r28, r24
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	0e 94 8e 03 	call	0x71c	; 0x71c <nrfReadRegister>
 9c0:	83 7f       	andi	r24, 0xF3	; 243
 9c2:	cc 70       	andi	r28, 0x0C	; 12
 9c4:	68 2f       	mov	r22, r24
 9c6:	6c 2b       	or	r22, r28
 9c8:	80 e0       	ldi	r24, 0x00	; 0
 9ca:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <nrfSetRetries>:
 9d2:	68 2b       	or	r22, r24
 9d4:	84 e0       	ldi	r24, 0x04	; 4
 9d6:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 9da:	08 95       	ret

000009dc <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
 9dc:	60 e7       	ldi	r22, 0x70	; 112
 9de:	87 e0       	ldi	r24, 0x07	; 7
 9e0:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
 9e4:	08 95       	ret

000009e6 <nrfBegin>:
 9e6:	8f e3       	ldi	r24, 0x3F	; 63
 9e8:	9c e9       	ldi	r25, 0x9C	; 156
 9ea:	01 97       	sbiw	r24, 0x01	; 1
 9ec:	f1 f7       	brne	.-4      	; 0x9ea <nrfBegin+0x4>
 9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <nrfBegin+0xa>
 9f0:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
 9f2:	6f e5       	ldi	r22, 0x5F	; 95
 9f4:	84 e0       	ldi	r24, 0x04	; 4
 9f6:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
 9fa:	86 e0       	ldi	r24, 0x06	; 6
 9fc:	0e 94 b7 04 	call	0x96e	; 0x96e <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
 a00:	80 e2       	ldi	r24, 0x20	; 32
 a02:	0e 94 c5 04 	call	0x98a	; 0x98a <nrfSetDataRate>
 a06:	88 23       	and	r24, r24
 a08:	19 f0       	breq	.+6      	; 0xa10 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	0e 94 c5 04 	call	0x98a	; 0x98a <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
 a16:	8c e0       	ldi	r24, 0x0C	; 12
 a18:	0e 94 db 04 	call	0x9b6	; 0x9b6 <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
 a1c:	60 e0       	ldi	r22, 0x00	; 0
 a1e:	8c e1       	ldi	r24, 0x1C	; 28
 a20:	0e 94 ce 03 	call	0x79c	; 0x79c <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
 a24:	8c e4       	ldi	r24, 0x4C	; 76
 a26:	0e 94 9f 04 	call	0x93e	; 0x93e <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
 a2a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <nrfClearInterruptBits>
  nrfFlushRx();
 a2e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <nrfFlushRx>
  nrfFlushTx();
 a32:	0e 94 f7 03 	call	0x7ee	; 0x7ee <nrfFlushTx>
 a36:	08 95       	ret

00000a38 <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
 a38:	e0 e4       	ldi	r30, 0x40	; 64
 a3a:	f6 e0       	ldi	r31, 0x06	; 6
 a3c:	88 e0       	ldi	r24, 0x08	; 8
 a3e:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
 a40:	84 e0       	ldi	r24, 0x04	; 4
 a42:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
 a44:	82 e0       	ldi	r24, 0x02	; 2
 a46:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
 a48:	e0 ea       	ldi	r30, 0xA0	; 160
 a4a:	f6 e0       	ldi	r31, 0x06	; 6
 a4c:	80 e2       	ldi	r24, 0x20	; 32
 a4e:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
 a50:	80 e4       	ldi	r24, 0x40	; 64
 a52:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
 a54:	80 e8       	ldi	r24, 0x80	; 128
 a56:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 a58:	e0 ea       	ldi	r30, 0xA0	; 160
 a5a:	f8 e0       	ldi	r31, 0x08	; 8
 a5c:	88 e1       	ldi	r24, 0x18	; 24
 a5e:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
 a60:	80 ec       	ldi	r24, 0xC0	; 192
 a62:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
 a64:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	86 83       	std	Z+6, r24	; 0x06
 a6a:	08 95       	ret

00000a6c <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
 a6c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
 a70:	e0 ea       	ldi	r30, 0xA0	; 160
 a72:	f8 e0       	ldi	r31, 0x08	; 8
 a74:	81 81       	ldd	r24, Z+1	; 0x01
 a76:	86 ff       	sbrs	r24, 6
 a78:	fd cf       	rjmp	.-6      	; 0xa74 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
 a7a:	e0 ea       	ldi	r30, 0xA0	; 160
 a7c:	f8 e0       	ldi	r31, 0x08	; 8
 a7e:	81 81       	ldd	r24, Z+1	; 0x01
 a80:	80 64       	ori	r24, 0x40	; 64
 a82:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
 a84:	80 81       	ld	r24, Z
}
 a86:	08 95       	ret

00000a88 <memcpy>:
 a88:	fb 01       	movw	r30, r22
 a8a:	dc 01       	movw	r26, r24
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <memcpy+0xa>
 a8e:	01 90       	ld	r0, Z+
 a90:	0d 92       	st	X+, r0
 a92:	41 50       	subi	r20, 0x01	; 1
 a94:	50 40       	sbci	r21, 0x00	; 0
 a96:	d8 f7       	brcc	.-10     	; 0xa8e <memcpy+0x6>
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
