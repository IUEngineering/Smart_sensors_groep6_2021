
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  000009da  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080201c  0080201c  00000a8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000072eb  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a95  00000000  00000000  000080a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a93  00000000  00000000  0000bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d4  00000000  00000000  0000d5d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b80  00000000  00000000  0000dda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f85  00000000  00000000  00011924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  000138a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_43>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_64>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_66>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_77>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_104>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ea ed       	ldi	r30, 0xDA	; 218
 214:	f9 e0       	ldi	r31, 0x09	; 9
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ac 31       	cpi	r26, 0x1C	; 28
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	ac e1       	ldi	r26, 0x1C	; 28
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a2 32       	cpi	r26, 0x22	; 34
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
 23a:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |                   // Select frequency range
 242:	e0 e5       	ldi	r30, 0x50	; 80
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	8b ec       	ldi	r24, 0xCB	; 203
 248:	82 83       	std	Z+2, r24	; 0x02
                 OSC_XOSCSEL_XTAL_16KCLK_gc;                // Select start-up time
  OSC.CTRL |= OSC_XOSCEN_bm;                                // Enable oscillator
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );                // Wait for oscillator is ready
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	83 ff       	sbrs	r24, 3
 254:	fd cf       	rjmp	.-6      	; 0x250 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (OSC_PLLFAC_gm & 2);   // Select PLL source and multipl. factor
 256:	e0 e5       	ldi	r30, 0x50	; 80
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	82 ec       	ldi	r24, 0xC2	; 194
 25c:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL |= OSC_PLLEN_bm;                                 // Enable PLL
 25e:	80 81       	ld	r24, Z
 260:	80 61       	ori	r24, 0x10	; 16
 262:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );                 // Wait for PLL is ready
 264:	81 81       	ldd	r24, Z+1	; 0x01
 266:	84 ff       	sbrs	r24, 4
 268:	fd cf       	rjmp	.-6      	; 0x264 <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
 26a:	88 ed       	ldi	r24, 0xD8	; 216
 26c:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
 274:	e0 e5       	ldi	r30, 0x50	; 80
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <init_keypad>:
*/

// this is the password for the keypad!
uint8_t password[password_length] = {1, 1, 1, 1, 1};

void init_keypad(void){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	
	//set pin PA1 as input 
	PORTA.DIRCLR = PIN1_bm;
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d6 e0       	ldi	r29, 0x06	; 6
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	9a 83       	std	Y+2, r25	; 0x02
	
	//set pin PB0 as output
	PORTB.DIRSET = PIN0_bm;
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	40 93 21 06 	sts	0x0621, r20	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	
	//set port D as input
	PORTD.DIRCLR = 0xFF;
 298:	a0 e6       	ldi	r26, 0x60	; 96
 29a:	b6 e0       	ldi	r27, 0x06	; 6
 29c:	3f ef       	ldi	r19, 0xFF	; 255
 29e:	12 96       	adiw	r26, 0x02	; 2
 2a0:	3c 93       	st	X, r19
 2a2:	12 97       	sbiw	r26, 0x02	; 2
	
	//set E0, E1, E2, E3 as inputs
	PORTE.DIRCLR = 0x0F;
 2a4:	e0 e8       	ldi	r30, 0x80	; 128
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	2f e0       	ldi	r18, 0x0F	; 15
 2aa:	22 83       	std	Z+2, r18	; 0x02
	
	//for port A
	//configure input sense on falling edge
	PORTA.PIN1CTRL = PORT_ISC_BOTHEDGES_gc;
 2ac:	19 8a       	std	Y+17, r1	; 0x11
	
	//for port D 
	//use internal pull ups
	//configure input sense on falling edge
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ae:	8a e1       	ldi	r24, 0x1A	; 26
 2b0:	50 96       	adiw	r26, 0x10	; 16
 2b2:	8c 93       	st	X, r24
 2b4:	50 97       	sbiw	r26, 0x10	; 16
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2b6:	51 96       	adiw	r26, 0x11	; 17
 2b8:	8c 93       	st	X, r24
 2ba:	51 97       	sbiw	r26, 0x11	; 17
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2bc:	52 96       	adiw	r26, 0x12	; 18
 2be:	8c 93       	st	X, r24
 2c0:	52 97       	sbiw	r26, 0x12	; 18
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c2:	53 96       	adiw	r26, 0x13	; 19
 2c4:	8c 93       	st	X, r24
 2c6:	53 97       	sbiw	r26, 0x13	; 19
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2c8:	54 96       	adiw	r26, 0x14	; 20
 2ca:	8c 93       	st	X, r24
 2cc:	54 97       	sbiw	r26, 0x14	; 20
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ce:	55 96       	adiw	r26, 0x15	; 21
 2d0:	8c 93       	st	X, r24
 2d2:	55 97       	sbiw	r26, 0x15	; 21
	PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2d4:	56 96       	adiw	r26, 0x16	; 22
 2d6:	8c 93       	st	X, r24
 2d8:	56 97       	sbiw	r26, 0x16	; 22
	PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2da:	57 96       	adiw	r26, 0x17	; 23
 2dc:	8c 93       	st	X, r24
 2de:	57 97       	sbiw	r26, 0x17	; 23
	
	//for port E
	//use internal pull ups
	//configure input sense on falling edge
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e0:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e2:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e4:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e6:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2e8:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ea:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ec:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2ee:	87 8b       	std	Z+23, r24	; 0x17
	
	//configure PA1 interrupt 0
	PORTA.INT0MASK = PIN1_bm;
 2f0:	9a 87       	std	Y+10, r25	; 0x0a
	PORTA.INTCTRL = PORT_INT0LVL_LO_gc;
 2f2:	49 87       	std	Y+9, r20	; 0x09
	
	//configure port D interrupt 0
	PORTD.INT0MASK = 0xFF;
 2f4:	1a 96       	adiw	r26, 0x0a	; 10
 2f6:	3c 93       	st	X, r19
 2f8:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.INTCTRL = PORT_INT0LVL_MED_gc;
 2fa:	19 96       	adiw	r26, 0x09	; 9
 2fc:	9c 93       	st	X, r25
	
	//configure port E interrupt 0
	PORTE.INT0MASK = 0x0F;
 2fe:	22 87       	std	Z+10, r18	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_MED_gc;
 300:	91 87       	std	Z+9, r25	; 0x09
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <init_timer_F0>:

void init_timer_F0(void){
	PORTF.DIRSET = PIN0_bm|PIN1_bm;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	TCF0.PER = 9999;
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	fb e0       	ldi	r31, 0x0B	; 11
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	97 e2       	ldi	r25, 0x27	; 39
 316:	86 a3       	std	Z+38, r24	; 0x26
 318:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.CTRLA = TC_CLKSEL_DIV8_gc;
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	80 83       	st	Z, r24
	TCF0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	81 83       	std	Z+1, r24	; 0x01
	TCF0.CCA = 0;
 322:	10 a6       	std	Z+40, r1	; 0x28
 324:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
 326:	12 a6       	std	Z+42, r1	; 0x2a
 328:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 10;
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	84 a7       	std	Z+44, r24	; 0x2c
 330:	95 a7       	std	Z+45, r25	; 0x2d
 332:	08 95       	ret

00000334 <init_timer_D0>:
}

void init_timer_D0(void){
	TCD0.CTRLA = TC_CLKSEL_OFF_gc;
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f9 e0       	ldi	r31, 0x09	; 9
 338:	10 82       	st	Z, r1
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	86 83       	std	Z+6, r24	; 0x06
	TCD0.CTRLB = TC_WGMODE_SS_gc;
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	81 83       	std	Z+1, r24	; 0x01
	TCD0.PER = 65535;  // 2^16 - 1
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	86 a3       	std	Z+38, r24	; 0x26
 348:	97 a3       	std	Z+39, r25	; 0x27
 34a:	08 95       	ret

0000034c <init_LED>:
}

void init_LED(void){
	init_timer_D0();
 34c:	0e 94 9a 01 	call	0x334	; 0x334 <init_timer_D0>
	init_timer_F0();
 350:	0e 94 84 01 	call	0x308	; 0x308 <init_timer_F0>
 354:	08 95       	ret

00000356 <what_key_PD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e9       	ldi	r24, 0x9F	; 159
 358:	9f e0       	ldi	r25, 0x0F	; 15
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <what_key_PD+0x4>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <what_key_PD+0xa>
 360:	00 00       	nop
}

uint8_t what_key_PD(void){
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
 362:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
	
	switch(in_PD){
 366:	8f 3e       	cpi	r24, 0xEF	; 239
 368:	c9 f0       	breq	.+50     	; 0x39c <what_key_PD+0x46>
 36a:	38 f4       	brcc	.+14     	; 0x37a <what_key_PD+0x24>
 36c:	8f 3b       	cpi	r24, 0xBF	; 191
 36e:	d1 f0       	breq	.+52     	; 0x3a4 <what_key_PD+0x4e>
 370:	8f 3d       	cpi	r24, 0xDF	; 223
 372:	b1 f0       	breq	.+44     	; 0x3a0 <what_key_PD+0x4a>
 374:	8f 37       	cpi	r24, 0x7F	; 127
 376:	d1 f4       	brne	.+52     	; 0x3ac <what_key_PD+0x56>
 378:	17 c0       	rjmp	.+46     	; 0x3a8 <what_key_PD+0x52>
 37a:	8b 3f       	cpi	r24, 0xFB	; 251
 37c:	59 f0       	breq	.+22     	; 0x394 <what_key_PD+0x3e>
 37e:	18 f4       	brcc	.+6      	; 0x386 <what_key_PD+0x30>
 380:	87 3f       	cpi	r24, 0xF7	; 247
 382:	51 f0       	breq	.+20     	; 0x398 <what_key_PD+0x42>
 384:	13 c0       	rjmp	.+38     	; 0x3ac <what_key_PD+0x56>
 386:	8d 3f       	cpi	r24, 0xFD	; 253
 388:	19 f0       	breq	.+6      	; 0x390 <what_key_PD+0x3a>
 38a:	8e 3f       	cpi	r24, 0xFE	; 254
 38c:	89 f0       	breq	.+34     	; 0x3b0 <what_key_PD+0x5a>
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <what_key_PD+0x56>
		case 0xFE:
			return 1;
			break;
			
		case 0xFD:
			return 2;
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	08 95       	ret
			break;
		
		case 0xFB:
			return 3;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	08 95       	ret
			break;
		
		case 0xF7:
			return 4;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	08 95       	ret
			break;
		
		case 0xEF:
			return 5;
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	08 95       	ret
			break;
		
		case 0xDF:
			return 6;
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	08 95       	ret
			break;
		
		case 0xBF:
			return 7;
 3a4:	87 e0       	ldi	r24, 0x07	; 7
 3a6:	08 95       	ret
			break;
		
		case 0x7F:
			return 8;
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	08 95       	ret
			break;
			
		default:
			return fault;
 3ac:	8d e0       	ldi	r24, 0x0D	; 13
 3ae:	08 95       	ret
	_delay_us(500);
	uint8_t in_PD = PORTD.IN;
	
	switch(in_PD){
		case 0xFE:
			return 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
			
		default:
			return fault;
			break;
	}
}
 3b2:	08 95       	ret

000003b4 <what_key_PE>:
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <what_key_PE+0x4>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <what_key_PE+0xa>
 3be:	00 00       	nop

uint8_t what_key_PE(void){
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
 3c0:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	
	switch(in_PE){
 3c4:	8b 3f       	cpi	r24, 0xFB	; 251
 3c6:	59 f0       	breq	.+22     	; 0x3de <what_key_PE+0x2a>
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <what_key_PE+0x1c>
 3ca:	87 3f       	cpi	r24, 0xF7	; 247
 3cc:	51 f0       	breq	.+20     	; 0x3e2 <what_key_PE+0x2e>
 3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <what_key_PE+0x32>
 3d0:	8d 3f       	cpi	r24, 0xFD	; 253
 3d2:	19 f0       	breq	.+6      	; 0x3da <what_key_PE+0x26>
 3d4:	8e 3f       	cpi	r24, 0xFE	; 254
 3d6:	49 f0       	breq	.+18     	; 0x3ea <what_key_PE+0x36>
 3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <what_key_PE+0x32>
		case 0xFE: //PE0
		return 9;
		break;
		
		case 0xFD: //PE1
		return 0;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
		break;
		
		case 0xFB: //PE2
		return ok;
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	08 95       	ret
		break;
		
		case 0xF7: //PE3
		return reset;
 3e2:	8b e0       	ldi	r24, 0x0B	; 11
 3e4:	08 95       	ret
		break;
		
		default:
		return fault;
 3e6:	8d e0       	ldi	r24, 0x0D	; 13
 3e8:	08 95       	ret
	_delay_us(500);
	uint8_t in_PE = PORTE.IN;
	
	switch(in_PE){
		case 0xFE: //PE0
		return 9;
 3ea:	89 e0       	ldi	r24, 0x09	; 9
		
		default:
		return fault;
		break;
	}
}
 3ec:	08 95       	ret

000003ee <password_check>:

uint8_t password_check(uint8_t key){
	if (key == ok)
 3ee:	8a 30       	cpi	r24, 0x0A	; 10
 3f0:	91 f4       	brne	.+36     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		green_on;
 3f2:	e0 e0       	ldi	r30, 0x00	; 0
 3f4:	fb e0       	ldi	r31, 0x0B	; 11
 3f6:	8a ef       	ldi	r24, 0xFA	; 250
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	80 af       	std	Z+56, r24	; 0x38
 3fc:	91 af       	std	Z+57, r25	; 0x39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	83 ed       	ldi	r24, 0xD3	; 211
 402:	90 e3       	ldi	r25, 0x30	; 48
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		_delay_ms(500);
		green_off;
 410:	10 ae       	std	Z+56, r1	; 0x38
 412:	11 ae       	std	Z+57, r1	; 0x39
 414:	11 c0       	rjmp	.+34     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		} else {
		red_on;
 416:	e0 e0       	ldi	r30, 0x00	; 0
 418:	fb e0       	ldi	r31, 0x0B	; 11
 41a:	8a ef       	ldi	r24, 0xFA	; 250
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	82 af       	std	Z+58, r24	; 0x3a
 420:	93 af       	std	Z+59, r25	; 0x3b
 422:	2f ef       	ldi	r18, 0xFF	; 255
 424:	83 ed       	ldi	r24, 0xD3	; 211
 426:	90 e3       	ldi	r25, 0x30	; 48
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
		_delay_ms(500);
		red_off;
 434:	12 ae       	std	Z+58, r1	; 0x3a
 436:	13 ae       	std	Z+59, r1	; 0x3b
	}
	return 1;
}
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	08 95       	ret

0000043c <open_door>:
	//}
	//return 2;
//}

void open_door(uint8_t val){
	if (val == 1) {
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	61 f4       	brne	.+24     	; 0x458 <open_door+0x1c>
		// unlock door
		PORTB.OUTSET = PIN0_bm;
 440:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
		// green led on
		green_on;
 444:	8a ef       	ldi	r24, 0xFA	; 250
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <__TEXT_REGION_LENGTH__+0x700b38>
 44c:	90 93 39 0b 	sts	0x0B39, r25	; 0x800b39 <__TEXT_REGION_LENGTH__+0x700b39>
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
 450:	87 e0       	ldi	r24, 0x07	; 7
 452:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
 456:	08 95       	ret
		
	} else if (val == 0) {
 458:	81 11       	cpse	r24, r1
 45a:	02 c0       	rjmp	.+4      	; 0x460 <open_door+0x24>
		asm("nop");
 45c:	00 00       	nop
 45e:	08 95       	ret
	} else {
		// red led on
		red_on;
 460:	8a ef       	ldi	r24, 0xFA	; 250
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <__TEXT_REGION_LENGTH__+0x700b3a>
 468:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <__TEXT_REGION_LENGTH__+0x700b3b>
		// start timer
		TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
 46c:	87 e0       	ldi	r24, 0x07	; 7
 46e:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
 472:	08 95       	ret

00000474 <init_nrf>:
	}
}

void init_nrf(void)
{
	nrfspiInit();                                        // Initialize SPI
 474:	0e 94 ba 04 	call	0x974	; 0x974 <nrfspiInit>
	nrfBegin();                                          // Initialize radio module
 478:	0e 94 91 04 	call	0x922	; 0x922 <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc,               // Auto Retransmission Delay: 1000 us
 47c:	68 e0       	ldi	r22, 0x08	; 8
 47e:	80 e3       	ldi	r24, 0x30	; 48
 480:	0e 94 87 04 	call	0x90e	; 0x90e <nrfSetRetries>
	NRF_SETUP_ARC_8RETRANSMIT_gc);						 // Auto Retransmission Count: 8 retries
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);             // Power Control: -6 dBm
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	0e 94 55 04 	call	0x8aa	; 0x8aa <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);          // Data Rate: 250 Kbps
 48a:	80 e2       	ldi	r24, 0x20	; 32
 48c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);               // CRC Check
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	0e 94 79 04 	call	0x8f2	; 0x8f2 <nrfSetCRCLength>
	nrfSetChannel(54);                                   // Channel: 54
 496:	86 e3       	ldi	r24, 0x36	; 54
 498:	0e 94 3d 04 	call	0x87a	; 0x87a <nrfSetChannel>
	nrfSetAutoAck(1);                                    // Auto Acknowledge on
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 49 04 	call	0x892	; 0x892 <nrfSetAutoAck>
	nrfEnableDynamicPayloads();                          // Enable Dynamic Payloads
 4a2:	0e 94 1a 04 	call	0x834	; 0x834 <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();                             // Clear interrupt bits
 4a6:	0e 94 8c 04 	call	0x918	; 0x918 <nrfClearInterruptBits>
	nrfFlushRx();                                        // Flush fifo's
 4aa:	0e 94 86 03 	call	0x70c	; 0x70c <nrfFlushRx>
	nrfFlushTx();
 4ae:	0e 94 95 03 	call	0x72a	; 0x72a <nrfFlushTx>

	nrfOpenWritingPipe(pipe);                            // Pipe for sending
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	90 e2       	ldi	r25, 0x20	; 32
 4b6:	0e 94 a4 03 	call	0x748	; 0x748 <nrfOpenWritingPipe>
	nrfOpenReadingPipe(0, pipe);                         // Necessary for acknowledge
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	70 e2       	ldi	r23, 0x20	; 32
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 c2 03 	call	0x784	; 0x784 <nrfOpenReadingPipe>
 4c4:	08 95       	ret

000004c6 <main>:
 *          which has a 16 MHz crystal 
 *
 * \return void
 */
void inline init_clock(void) {
  Config32MHzClock_Ext16M();
 4c6:	0e 94 21 01 	call	0x242	; 0x242 <Config32MHzClock_Ext16M>
	// init nrf
	// init keypad
	// init hall effect sensor
	// init sleep mode
	init_clock();
	init_keypad();
 4ca:	0e 94 43 01 	call	0x286	; 0x286 <init_keypad>
	init_LED();
 4ce:	0e 94 a6 01 	call	0x34c	; 0x34c <init_LED>
    init_nrf();
 4d2:	0e 94 3a 02 	call	0x474	; 0x474 <init_nrf>
	
	// enable global interrupts
	// enter idle mode
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
 4d6:	e0 ea       	ldi	r30, 0xA0	; 160
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	82 81       	ldd	r24, Z+2	; 0x02
 4dc:	83 60       	ori	r24, 0x03	; 3
 4de:	82 83       	std	Z+2, r24	; 0x02
	sei();
 4e0:	78 94       	sei
	
	red_on;
 4e2:	e0 e0       	ldi	r30, 0x00	; 0
 4e4:	fb e0       	ldi	r31, 0x0B	; 11
 4e6:	8a ef       	ldi	r24, 0xFA	; 250
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	82 af       	std	Z+58, r24	; 0x3a
 4ec:	93 af       	std	Z+59, r25	; 0x3b
 4ee:	2f ef       	ldi	r18, 0xFF	; 255
 4f0:	83 ed       	ldi	r24, 0xD3	; 211
 4f2:	90 e3       	ldi	r25, 0x30	; 48
 4f4:	21 50       	subi	r18, 0x01	; 1
 4f6:	80 40       	sbci	r24, 0x00	; 0
 4f8:	90 40       	sbci	r25, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <main+0x2e>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x38>
 4fe:	00 00       	nop
	_delay_ms(500);
	red_off;
 500:	12 ae       	std	Z+58, r1	; 0x3a
 502:	13 ae       	std	Z+59, r1	; 0x3b
 504:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 508:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
			case 1:
				//send over NRF
				//enter idle mode
				break;
			default:
				state = 1;
 50c:	31 e0       	ldi	r19, 0x01	; 1
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <main+0x50>
 512:	83 2f       	mov	r24, r19
 514:	92 2f       	mov	r25, r18
	_delay_ms(500);
	red_off;
	
    while (1) 
    {
		switch (state)
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	91 05       	cpc	r25, r1
 51a:	e8 f3       	brcs	.-6      	; 0x516 <main+0x50>
 51c:	fa cf       	rjmp	.-12     	; 0x512 <main+0x4c>

0000051e <__vector_104>:
*	<TR><TD> LPO </TD><TD> LP_OUT	</TD><TD> PA1           </TD></TR>	
*	</TABLE>
*/

// ISR for the NRF
ISR(PORTF_INT0_vect){
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
	// nrf what happened
	// react to message
	// go back to idle mode
}
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_64>:

// ISR for the keypad on port D
ISR(PORTD_INT0_vect){
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	0b b6       	in	r0, 0x3b	; 59
 53e:	0f 92       	push	r0
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
	cli();
 558:	f8 94       	cli
	uint8_t key;
	int8_t door;
	red_on;
 55a:	e0 e0       	ldi	r30, 0x00	; 0
 55c:	fb e0       	ldi	r31, 0x0B	; 11
 55e:	8a ef       	ldi	r24, 0xFA	; 250
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	82 af       	std	Z+58, r24	; 0x3a
 564:	93 af       	std	Z+59, r25	; 0x3b
 566:	2f ef       	ldi	r18, 0xFF	; 255
 568:	89 e6       	ldi	r24, 0x69	; 105
 56a:	98 e1       	ldi	r25, 0x18	; 24
 56c:	21 50       	subi	r18, 0x01	; 1
 56e:	80 40       	sbci	r24, 0x00	; 0
 570:	90 40       	sbci	r25, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <__vector_64+0x3a>
 574:	00 c0       	rjmp	.+0      	; 0x576 <__vector_64+0x44>
 576:	00 00       	nop
	_delay_ms(250);
	red_off;
 578:	12 ae       	std	Z+58, r1	; 0x3a
 57a:	13 ae       	std	Z+59, r1	; 0x3b
	// wake up
	// check what key is pressed
	key	= what_key_PD();
 57c:	0e 94 ab 01 	call	0x356	; 0x356 <what_key_PD>
	// add key press to password check
	door = password_check(key);
 580:	0e 94 f7 01 	call	0x3ee	; 0x3ee <password_check>
	// if password check is filled compare with password
	// correct open door and show green led
	// incorrect show red led. (maybe in a later revision buz a buzzer)
	open_door(door);
 584:	0e 94 1e 02 	call	0x43c	; 0x43c <open_door>
	// go back to idle mode
	sei();
 588:	78 94       	sei
}
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	7f 91       	pop	r23
 598:	6f 91       	pop	r22
 59a:	5f 91       	pop	r21
 59c:	4f 91       	pop	r20
 59e:	3f 91       	pop	r19
 5a0:	2f 91       	pop	r18
 5a2:	0f 90       	pop	r0
 5a4:	0b be       	out	0x3b, r0	; 59
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_43>:

// ISR for the keypad on port E
ISR(PORTE_INT0_vect){
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	0b b6       	in	r0, 0x3b	; 59
 5bc:	0f 92       	push	r0
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
	cli();
 5d6:	f8 94       	cli
	uint8_t key;
	int8_t door;
	// wake up
	// check what key is pressed
	key = what_key_PE();
 5d8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <what_key_PE>
	// add key press to password check
	door = password_check(key);
 5dc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <password_check>
	// if password check is filled compare with password
	// correct open door and show green led
	// incorrect show red led. (maybe in a later revision buz a buzzer)
	// go back to idle
	open_door(door);
 5e0:	0e 94 1e 02 	call	0x43c	; 0x43c <open_door>
	// go back to idle mode
	sei();
 5e4:	78 94       	sei
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0b be       	out	0x3b, r0	; 59
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <__vector_66>:

// ISR for last person out button
ISR(PORTA_INT0_vect){
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	11 24       	eor	r1, r1
	// make state 0
	state = 0;
 616:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
 61a:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
}
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_77>:

ISR(TCD0_OVF_vect){
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	0b b6       	in	r0, 0x3b	; 59
 634:	0f 92       	push	r0
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	red_off;
 63a:	e0 e0       	ldi	r30, 0x00	; 0
 63c:	fb e0       	ldi	r31, 0x0B	; 11
 63e:	12 ae       	std	Z+58, r1	; 0x3a
 640:	13 ae       	std	Z+59, r1	; 0x3b
	green_off;
 642:	10 ae       	std	Z+56, r1	; 0x38
 644:	11 ae       	std	Z+57, r1	; 0x39
 646:	ff 91       	pop	r31
 648:	ef 91       	pop	r30
 64a:	0f 90       	pop	r0
 64c:	0b be       	out	0x3b, r0	; 59
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	c0 ea       	ldi	r28, 0xA0	; 160
 660:	d6 e0       	ldi	r29, 0x06	; 6
 662:	10 e2       	ldi	r17, 0x20	; 32
 664:	1e 83       	std	Y+6, r17	; 0x06
 666:	8f 71       	andi	r24, 0x1F	; 31
 668:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 672:	1d 83       	std	Y+5, r17	; 0x05
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	08 95       	ret

0000067c <nrfWriteRegisterMulti>:
 67c:	df 92       	push	r13
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	7b 01       	movw	r14, r22
 68c:	c4 2f       	mov	r28, r20
 68e:	90 e2       	ldi	r25, 0x20	; 32
 690:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 694:	8f 71       	andi	r24, 0x1F	; 31
 696:	80 62       	ori	r24, 0x20	; 32
 698:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 69c:	d8 2e       	mov	r13, r24
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	8c 0f       	add	r24, r28
 6a2:	cc 23       	and	r28, r28
 6a4:	69 f0       	breq	.+26     	; 0x6c0 <nrfWriteRegisterMulti+0x44>
 6a6:	e7 01       	movw	r28, r14
 6a8:	08 2f       	mov	r16, r24
 6aa:	10 e0       	ldi	r17, 0x00	; 0
 6ac:	0f 5f       	subi	r16, 0xFF	; 255
 6ae:	1f 4f       	sbci	r17, 0xFF	; 255
 6b0:	0e 0d       	add	r16, r14
 6b2:	1f 1d       	adc	r17, r15
 6b4:	89 91       	ld	r24, Y+
 6b6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 6ba:	c0 17       	cp	r28, r16
 6bc:	d1 07       	cpc	r29, r17
 6be:	d1 f7       	brne	.-12     	; 0x6b4 <nrfWriteRegisterMulti+0x38>
 6c0:	80 e2       	ldi	r24, 0x20	; 32
 6c2:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 6c6:	8d 2d       	mov	r24, r13
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	08 95       	ret

000006d8 <nrfWriteRegister>:
 6d8:	ff 92       	push	r15
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	f6 2e       	mov	r15, r22
 6e4:	c0 ea       	ldi	r28, 0xA0	; 160
 6e6:	d6 e0       	ldi	r29, 0x06	; 6
 6e8:	10 e2       	ldi	r17, 0x20	; 32
 6ea:	1e 83       	std	Y+6, r17	; 0x06
 6ec:	8f 71       	andi	r24, 0x1F	; 31
 6ee:	80 62       	ori	r24, 0x20	; 32
 6f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 6f4:	08 2f       	mov	r16, r24
 6f6:	8f 2d       	mov	r24, r15
 6f8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 6fc:	1d 83       	std	Y+5, r17	; 0x05
 6fe:	80 2f       	mov	r24, r16
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	ff 90       	pop	r15
 70a:	08 95       	ret

0000070c <nrfFlushRx>:
 70c:	1f 93       	push	r17
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	c0 ea       	ldi	r28, 0xA0	; 160
 714:	d6 e0       	ldi	r29, 0x06	; 6
 716:	10 e2       	ldi	r17, 0x20	; 32
 718:	1e 83       	std	Y+6, r17	; 0x06
 71a:	82 ee       	ldi	r24, 0xE2	; 226
 71c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 720:	1d 83       	std	Y+5, r17	; 0x05
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	08 95       	ret

0000072a <nrfFlushTx>:
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	c0 ea       	ldi	r28, 0xA0	; 160
 732:	d6 e0       	ldi	r29, 0x06	; 6
 734:	10 e2       	ldi	r17, 0x20	; 32
 736:	1e 83       	std	Y+6, r17	; 0x06
 738:	81 ee       	ldi	r24, 0xE1	; 225
 73a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 73e:	1d 83       	std	Y+5, r17	; 0x05
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	08 95       	ret

00000748 <nrfOpenWritingPipe>:
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	ec 01       	movw	r28, r24
 74e:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <addr_width>
 752:	bc 01       	movw	r22, r24
 754:	8a e0       	ldi	r24, 0x0A	; 10
 756:	0e 94 3e 03 	call	0x67c	; 0x67c <nrfWriteRegisterMulti>
 75a:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <addr_width>
 75e:	be 01       	movw	r22, r28
 760:	80 e1       	ldi	r24, 0x10	; 16
 762:	0e 94 3e 03 	call	0x67c	; 0x67c <nrfWriteRegisterMulti>
 766:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <fixed_payload_size>
 76a:	60 32       	cpi	r22, 0x20	; 32
 76c:	20 f4       	brcc	.+8      	; 0x776 <nrfOpenWritingPipe+0x2e>
 76e:	81 e1       	ldi	r24, 0x11	; 17
 770:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 774:	04 c0       	rjmp	.+8      	; 0x77e <nrfOpenWritingPipe+0x36>
 776:	60 e2       	ldi	r22, 0x20	; 32
 778:	81 e1       	ldi	r24, 0x11	; 17
 77a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	08 95       	ret

00000784 <nrfOpenReadingPipe>:
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	c8 2f       	mov	r28, r24
 78e:	8b 01       	movw	r16, r22
 790:	81 11       	cpse	r24, r1
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <nrfOpenReadingPipe+0x20>
 794:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <addr_width>
 798:	50 e0       	ldi	r21, 0x00	; 0
 79a:	8c e1       	ldi	r24, 0x1C	; 28
 79c:	90 e2       	ldi	r25, 0x20	; 32
 79e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <memcpy>
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <nrfOpenReadingPipe+0x28>
 7a4:	87 30       	cpi	r24, 0x07	; 7
 7a6:	78 f5       	brcc	.+94     	; 0x806 <nrfOpenReadingPipe+0x82>
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	58 f4       	brcc	.+22     	; 0x7c2 <nrfOpenReadingPipe+0x3e>
 7ac:	ec 2f       	mov	r30, r28
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ea 5e       	subi	r30, 0xEA	; 234
 7b2:	ff 4d       	sbci	r31, 0xDF	; 223
 7b4:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <addr_width>
 7b8:	b8 01       	movw	r22, r16
 7ba:	80 81       	ld	r24, Z
 7bc:	0e 94 3e 03 	call	0x67c	; 0x67c <nrfWriteRegisterMulti>
 7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <nrfOpenReadingPipe+0x4e>
 7c2:	e8 2f       	mov	r30, r24
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	ea 5e       	subi	r30, 0xEA	; 234
 7c8:	ff 4d       	sbci	r31, 0xDF	; 223
 7ca:	41 e0       	ldi	r20, 0x01	; 1
 7cc:	80 81       	ld	r24, Z
 7ce:	0e 94 3e 03 	call	0x67c	; 0x67c <nrfWriteRegisterMulti>
 7d2:	d0 e0       	ldi	r29, 0x00	; 0
 7d4:	fe 01       	movw	r30, r28
 7d6:	e0 5f       	subi	r30, 0xF0	; 240
 7d8:	ff 4d       	sbci	r31, 0xDF	; 223
 7da:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <fixed_payload_size>
 7de:	80 81       	ld	r24, Z
 7e0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 7ea:	c6 5f       	subi	r28, 0xF6	; 246
 7ec:	df 4d       	sbci	r29, 0xDF	; 223
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	08 80       	ld	r0, Y
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <nrfOpenReadingPipe+0x76>
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	0a 94       	dec	r0
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <nrfOpenReadingPipe+0x72>
 7fe:	68 2b       	or	r22, r24
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	08 95       	ret

00000810 <nrfToggleFeatures>:
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	c0 ea       	ldi	r28, 0xA0	; 160
 818:	d6 e0       	ldi	r29, 0x06	; 6
 81a:	10 e2       	ldi	r17, 0x20	; 32
 81c:	1e 83       	std	Y+6, r17	; 0x06
 81e:	80 e5       	ldi	r24, 0x50	; 80
 820:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 824:	83 e7       	ldi	r24, 0x73	; 115
 826:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nrfspiTransfer>
 82a:	1d 83       	std	Y+5, r17	; 0x05
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	08 95       	ret

00000834 <nrfEnableDynamicPayloads>:
 834:	8d e1       	ldi	r24, 0x1D	; 29
 836:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 83a:	68 2f       	mov	r22, r24
 83c:	64 60       	ori	r22, 0x04	; 4
 83e:	8d e1       	ldi	r24, 0x1D	; 29
 840:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 844:	8d e1       	ldi	r24, 0x1D	; 29
 846:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 84a:	81 11       	cpse	r24, r1
 84c:	0a c0       	rjmp	.+20     	; 0x862 <nrfEnableDynamicPayloads+0x2e>
 84e:	0e 94 08 04 	call	0x810	; 0x810 <nrfToggleFeatures>
 852:	8d e1       	ldi	r24, 0x1D	; 29
 854:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 858:	68 2f       	mov	r22, r24
 85a:	64 60       	ori	r22, 0x04	; 4
 85c:	8d e1       	ldi	r24, 0x1D	; 29
 85e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 862:	8c e1       	ldi	r24, 0x1C	; 28
 864:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 868:	68 2f       	mov	r22, r24
 86a:	6f 63       	ori	r22, 0x3F	; 63
 86c:	8c e1       	ldi	r24, 0x1C	; 28
 86e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	80 93 21 20 	sts	0x2021, r24	; 0x802021 <dynamic_payloads_enabled>
 878:	08 95       	ret

0000087a <nrfSetChannel>:
 87a:	88 23       	and	r24, r24
 87c:	2c f0       	brlt	.+10     	; 0x888 <nrfSetChannel+0xe>
 87e:	68 2f       	mov	r22, r24
 880:	85 e0       	ldi	r24, 0x05	; 5
 882:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 886:	08 95       	ret
 888:	6f e7       	ldi	r22, 0x7F	; 127
 88a:	85 e0       	ldi	r24, 0x05	; 5
 88c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 890:	08 95       	ret

00000892 <nrfSetAutoAck>:
 892:	88 23       	and	r24, r24
 894:	29 f0       	breq	.+10     	; 0x8a0 <nrfSetAutoAck+0xe>
 896:	6f e3       	ldi	r22, 0x3F	; 63
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 89e:	08 95       	ret
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 8a8:	08 95       	ret

000008aa <nrfSetPALevel>:
 8aa:	cf 93       	push	r28
 8ac:	c8 2f       	mov	r28, r24
 8ae:	86 e0       	ldi	r24, 0x06	; 6
 8b0:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 8b4:	89 7f       	andi	r24, 0xF9	; 249
 8b6:	c6 70       	andi	r28, 0x06	; 6
 8b8:	68 2f       	mov	r22, r24
 8ba:	6c 2b       	or	r22, r28
 8bc:	86 e0       	ldi	r24, 0x06	; 6
 8be:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 8c2:	cf 91       	pop	r28
 8c4:	08 95       	ret

000008c6 <nrfSetDataRate>:
 8c6:	cf 93       	push	r28
 8c8:	c8 2f       	mov	r28, r24
 8ca:	86 e0       	ldi	r24, 0x06	; 6
 8cc:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 8d0:	87 7d       	andi	r24, 0xD7	; 215
 8d2:	9c 2f       	mov	r25, r28
 8d4:	98 72       	andi	r25, 0x28	; 40
 8d6:	68 2f       	mov	r22, r24
 8d8:	69 2b       	or	r22, r25
 8da:	86 e0       	ldi	r24, 0x06	; 6
 8dc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 8e0:	86 e0       	ldi	r24, 0x06	; 6
 8e2:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 8e6:	91 e0       	ldi	r25, 0x01	; 1
 8e8:	c8 13       	cpse	r28, r24
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	89 2f       	mov	r24, r25
 8ee:	cf 91       	pop	r28
 8f0:	08 95       	ret

000008f2 <nrfSetCRCLength>:
 8f2:	cf 93       	push	r28
 8f4:	c8 2f       	mov	r28, r24
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	0e 94 2c 03 	call	0x658	; 0x658 <nrfReadRegister>
 8fc:	83 7f       	andi	r24, 0xF3	; 243
 8fe:	cc 70       	andi	r28, 0x0C	; 12
 900:	68 2f       	mov	r22, r24
 902:	6c 2b       	or	r22, r28
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 90a:	cf 91       	pop	r28
 90c:	08 95       	ret

0000090e <nrfSetRetries>:
 90e:	68 2b       	or	r22, r24
 910:	84 e0       	ldi	r24, 0x04	; 4
 912:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 916:	08 95       	ret

00000918 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
 918:	60 e7       	ldi	r22, 0x70	; 112
 91a:	87 e0       	ldi	r24, 0x07	; 7
 91c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
 920:	08 95       	ret

00000922 <nrfBegin>:
 922:	8f e3       	ldi	r24, 0x3F	; 63
 924:	9c e9       	ldi	r25, 0x9C	; 156
 926:	01 97       	sbiw	r24, 0x01	; 1
 928:	f1 f7       	brne	.-4      	; 0x926 <nrfBegin+0x4>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <nrfBegin+0xa>
 92c:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
 92e:	6f e5       	ldi	r22, 0x5F	; 95
 930:	84 e0       	ldi	r24, 0x04	; 4
 932:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
 936:	86 e0       	ldi	r24, 0x06	; 6
 938:	0e 94 55 04 	call	0x8aa	; 0x8aa <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
 93c:	80 e2       	ldi	r24, 0x20	; 32
 93e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <nrfSetDataRate>
 942:	88 23       	and	r24, r24
 944:	19 f0       	breq	.+6      	; 0x94c <nrfBegin+0x2a>
  {
    p_variant = 1 ;
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
 952:	8c e0       	ldi	r24, 0x0C	; 12
 954:	0e 94 79 04 	call	0x8f2	; 0x8f2 <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	8c e1       	ldi	r24, 0x1C	; 28
 95c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
 960:	8c e4       	ldi	r24, 0x4C	; 76
 962:	0e 94 3d 04 	call	0x87a	; 0x87a <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
 966:	0e 94 8c 04 	call	0x918	; 0x918 <nrfClearInterruptBits>
  nrfFlushRx();
 96a:	0e 94 86 03 	call	0x70c	; 0x70c <nrfFlushRx>
  nrfFlushTx();
 96e:	0e 94 95 03 	call	0x72a	; 0x72a <nrfFlushTx>
 972:	08 95       	ret

00000974 <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
 974:	e0 e4       	ldi	r30, 0x40	; 64
 976:	f6 e0       	ldi	r31, 0x06	; 6
 978:	88 e0       	ldi	r24, 0x08	; 8
 97a:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
 97c:	84 e0       	ldi	r24, 0x04	; 4
 97e:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
 984:	e0 ea       	ldi	r30, 0xA0	; 160
 986:	f6 e0       	ldi	r31, 0x06	; 6
 988:	80 e2       	ldi	r24, 0x20	; 32
 98a:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
 98c:	80 e4       	ldi	r24, 0x40	; 64
 98e:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
 990:	80 e8       	ldi	r24, 0x80	; 128
 992:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 994:	e0 ea       	ldi	r30, 0xA0	; 160
 996:	f8 e0       	ldi	r31, 0x08	; 8
 998:	88 e1       	ldi	r24, 0x18	; 24
 99a:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
 99c:	80 ec       	ldi	r24, 0xC0	; 192
 99e:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
 9a0:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	86 83       	std	Z+6, r24	; 0x06
 9a6:	08 95       	ret

000009a8 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
 9a8:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
 9ac:	e0 ea       	ldi	r30, 0xA0	; 160
 9ae:	f8 e0       	ldi	r31, 0x08	; 8
 9b0:	81 81       	ldd	r24, Z+1	; 0x01
 9b2:	86 ff       	sbrs	r24, 6
 9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
 9b6:	e0 ea       	ldi	r30, 0xA0	; 160
 9b8:	f8 e0       	ldi	r31, 0x08	; 8
 9ba:	81 81       	ldd	r24, Z+1	; 0x01
 9bc:	80 64       	ori	r24, 0x40	; 64
 9be:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
 9c0:	80 81       	ld	r24, Z
}
 9c2:	08 95       	ret

000009c4 <memcpy>:
 9c4:	fb 01       	movw	r30, r22
 9c6:	dc 01       	movw	r26, r24
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <memcpy+0xa>
 9ca:	01 90       	ld	r0, Z+
 9cc:	0d 92       	st	X+, r0
 9ce:	41 50       	subi	r20, 0x01	; 1
 9d0:	50 40       	sbci	r21, 0x00	; 0
 9d2:	d8 f7       	brcc	.-10     	; 0x9ca <memcpy+0x6>
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
